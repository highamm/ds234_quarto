geom_segment(aes(xend = Type_Deford, y = 0, yend = med_def)) +
geom_point() +
coord_flip() +
theme_minimal()
mortality_df <- read_csv(here("data/gun_violence_us.csv")) |>
mutate(region = factor(region))
ggplot(data = mortality_df,
aes(x = ownership_rate, y = mortality_rate, colour = region)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(data = mortality_df,
aes(x = ownership_rate, y = mortality_rate, colour = region)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()
mortality_df <- mortality_df |>
mutate(region_3 = fct_relevel(region, c("South", "West", "MW", "NE")))
ggplot(data = mortality_df,
aes(x = ownership_rate, y = mortality_rate, colour = region_3)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(data = mortality_df,
aes(x = ownership_rate, y = mortality_rate, colour = region_3)) +
geom_point() +
geom_smooth(method = "lm") +
theme_minimal()
mod <- lm(mortality_rate ~ ownership_rate + region, data = mortality_df)
mod3 <- lm(mortality_rate ~ ownership_rate + region_3, data = mortality_df)
summary(mod)
summary(mod3)
library(tidyverse)
library(here)
standings_df <- read_csv(here("data/standings.csv"))
standings_df
library(tidyverse)
fruit_df <- tibble::tibble(fruit = c("A", "B", "B", "A"))
fruit_df |> mutate(fruit_newlevels = fct_recode(fruit,
A = "Apple",
B = "Banana"))
fruit_df |> mutate(fruit_newlevels = fct_recode(fruit,
"Apple" = A,
"Banana" = B))
fruit_df |> mutate(fruit_newlevels = fct_recode(fruit,
"Apple" = "A",
"Banana" = "B"))
pokemon_long <- pokemon_long |>
filter(!is.na(Type)) |>
mutate(Type_Deford = fct_reorder(.f = Type, .x = Defense,
.fun = max))
ggplot(data = pokemon_long, aes(x = Type_Deford,
y = Defense)) +
geom_boxplot() +
coord_flip() +
theme_minimal()
gss
gss_cat
table(gss_cat$race)
fitness_df <- read_csv(here::here("data/fitness_higham_notclean.csv"))
fitness_df <- read_csv(here::here("data/higham_fitness_notclean.csv"))
fitness_df
fitness_df <- read_csv(here::here("data/higham_fitness_notclean.csv"),
col_types = cols(stepgoal = col_logical()))
fitness_df
library(tidyverse)
fitness_df <- read_csv(here::here("data/higham_fitness_notclean.csv"))
fitness_df <- read_csv(here::here("data/higham_fitness_notclean.csv"),
col_types = cols(stepgoal = col_logical(),
month = col_factor(),
weekday = col_factor()))
fitness_df
fitness_df
url <- "https://www.stlawu.edu/ir/diversity/faculty"
h <- read_html(url)
library(rvest)
url <- "https://www.stlawu.edu/ir/diversity/faculty"
h <- read_html(url)
tab <- h |> html_nodes("table")
obj <- tab[[1]] |> html_table(fill = TRUE)
obj
obj <- tab[[2]] |> html_table(fill = TRUE)
obj <- tab[[3]] |> html_table(fill = TRUE)
obj <- tab[[1]] |> html_table(fill = TRUE)
url <- "https://www.stlawu.edu/offices/institutional-research/student-diversity-2021"
h <- read_html(url)
tab <- h |> html_nodes("table")
obj <- tab[[1]] |> html_table(fill = TRUE)
obj
atp_2018 <- read_csv(here("data/atp_matches_2018.csv"),
col_types = cols(winner_seed = col_character(),
loser_seed = col_character()))
atp_df <- bind_rows(atp_2018, atp_2019)
atp_2019 <- read_csv(here("data/atp_matches_2019.csv"))
atp_2018 <- read_csv(here("data/atp_matches_2018.csv"))
df_test2a <- tibble(xvar = c(1, 2))
df_test2b <- tibble(xvar = c(1, 2), y = c(5, 1))
bind_rows(df_test2a, df_test2b)
slumajors_df <- read_csv(here("data/SLU_Majors_15_19.csv"))
collegemajors_df <- read_csv(here("data/college-majors.csv"))
head(slumajors_df)
head(collegemajors_df)
library(tidyverse)
df_test1a <- tibble(xvar = c(1, 2), yvar = c(5, 1))
df_test1b <- tibble(x = c(1, 2), y = c(5, 1))
bind_rows(df_test1a, df_test1b)
df_test1a |> rename(x = "xvar",
y = "yvar")
df_test1a_rename <- df_test1a |> rename(x = "xvar",
y = "yvar")
bind_rows(df_test1a_rename, df_test1b)
# Chunk 1
library(tidyverse)
library(here)
atp_2019 <- read_csv(here("data/atp_matches_2019.csv"))
atp_2018 <- read_csv(here("data/atp_matches_2018.csv"))
head(atp_2019)
head(atp_2018)
# Chunk 2
atp_df <- bind_rows(atp_2018, atp_2019)
##install.packages("babynames")
library(babynames)
life_df <- babynames::lifetables
birth_df <- babynames::births
babynames_df <- babynames::babynames
left_join(babynames_df, birth_df, by = c("year" = "year"))
left_join(birth_df, babynames_df, by = c("year" = "year"))
holiday_df
library(tidyverse)
library(here)
library(tidyverse)
holiday_df <- read_csv(here("data/animal_crossing_holidays.csv"))
holiday_df
holiday_df$Date4
holiday_df |> mutate(Date_test = mdy(Date3)) |>
select(Date_test, everything())
library(lubridate)
holiday_df |> mutate(Date_test = mdy(Date3)) |>
select(Date_test, everything())
holiday_df |> mutate(Date_test = ymd(Date5)) |>
select(Date_test, everything())
?month
stocks_long |>
mutate(month_stock = month(start_date, label = TRUE, abbr = FALSE))
library(tidyverse)
library(here)
beyonce <- read_csv(here("data/beyonce_lyrics.csv"))
library(tidyverse)
library(here)
beyonce <- read_csv(here("data/beyonce_lyrics.csv"))
library(tidytext)
beyonce_unnest <- beyonce |> unnest_tokens(output = "word", input = "line")
beyonce_unnest <- beyonce_unnest |> mutate(word = str_to_lower(word))
beyonce_stop <- anti_join(beyonce_unnest, stop_words, by = c("word" = "word"))
beyonce_sum <- beyonce_stop |> group_by(word) |>
summarise(n = n()) |>
arrange(desc(n)) |>
print(n = 25)
beyonce_sum
beyonce_sum <- beyonce_stop |> group_by(word) |>
summarise(n = n()) |>
arrange(desc(n)) |>
print(n = 25)
more_stop_df <- tibble::tibble(word = c("ooh", "gotta", "ya", "uh", "yeah"))
anti_join(beyonce_sum, more_stop_df)
beyonce_lolli <- anti_join(beyonce_sum, more_stop_df)
beyonce_lolli
beyonce_lolli |> slice(1:20) |> mutate(word = fct_reorder(word, n))
beyonce_20 <- beyonce_lolli |> slice(1:20) |> mutate(word = fct_reorder(word, n))
ggplot(data = beyonce_20, aes(x = word, y = n)) +
geom_point() +
geom_segment(aes(xend = word, y = 0, yend = n)) +
theme_minimal()
ggplot(data = beyonce_20, aes(x = word, y = n)) +
geom_point() +
geom_segment(aes(xend = word, y = 0, yend = n)) +
theme_minimal() +
coord_flip()
library(wordcloud)
beyonce_small <- beyonce_sum |> filter(n > 50)
wordcloud(beyonce_small$word, beyonce_small$n,
colors = brewer.pal(8, "Dark2"), scale = c(5, .2),
random.order = FALSE, random.color = FALSE)
?random.order
?wordcloud
med_djok_df <- read_csv(here("data/med_djok.csv"))
med_djok_df
med_djok_df |>
mutate(serve_location = case_when(str_detect(point, "^4") ~ "wide",
str_detect(point, "^5") ~ "body",
str_detect(point, "^6") ~ "down the center"))
med_djok_df |>
mutate(serve_location = case_when(str_detect(point, "^4") ~ "wide",
str_detect(point, "^5") ~ "body",
str_detect(point, "^6") ~ "down the center")) |>
relocate(serve_location)
library(openintro)
resume
resume_sum <- resume |>
mutate(received_callback = received_callback) |>
group_by(race, received_callback) |>
summarise(count = n())
resume_sum <- resume |>
mutate(received_callback = received_callback) |>
group_by(gender, received_callback) |>
summarise(count = n())
ggplot(data = resume_sum, aes(x = gender, y = count)) +
geom_col(aes(fill = received_callback)) +
scale_fill_viridis_c()
ggplot(data = resume_sum, aes(x = received_callback, y = years_experience)) +
geom_boxplot()
resume_sum
ggplot(data = resume, aes(x = received_callback, y = years_experience)) +
geom_boxplot()
resume
ggplot(data = resume, aes(x = received_callback, y = years_experience,
group = received_callback)) +
geom_boxplot()
ggplot(data = resume, aes(x = factor(received_callback),
y = years_experience)) +
geom_boxplot()
ggplot(data = resume, aes(x = factor(received_callback),
y = years_experience)) +
geom_boxplot() +
theme_minimal() +
labs(x = "Received Callback")
chisq.test(x = resume$gender, y = resume$received_callback)
library(broom)
library(here)
coffee_df <- read_csv(here("data/coffee_ratings.csv"))
coffee_mod <- lm(total_cup_points ~ species + aroma + flavor +
sweetness + moisture,
data = coffee_df)
coffee_df
coffee_mod_large <- lm(total_cup_points ~ species + aroma + flavor +
sweetness + moisture + aftertaste + acidity,
data = coffee_df)
glance(coffee_mod)
glance(coffee_mod_large)
augment(coffee_mod_large)
coffee_aug <- augment(coffee_mod_large)
ggplot(data = coffee_aug, aes(x = .resid)) +
geom_histogram(colour = "black", fill = "white")
ggplot(data = coffee_aug, aes(x = .resid)) +
geom_histogram(colour = "black", fill = "white") +
theme_minimal()
coffee_aug |> arrange(desc(.pred)) |> slice(1:5)
coffee_aug
coffee_aug |> arrange(desc(.fitted)) |> slice(1:5)
year_vec <- 2014:2021
map(year_vec, scrape_billboard)
scrape_billboard <- function(year) {
url <- paste0("https://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_", year)
## convert the html code into something R can read
billboard_tab <- read_html(url) |> html_nodes("table")
## grabs the tables
billboard_df <- billboard_tab[[1]] |> html_table() |>
mutate(year = year)
billboard_df
}
year_vec <- 2014:2021
map(year_vec, scrape_billboard)
map(year_vec, scrape_billboard) |> bind_rows()
combined_df |> group_by(`Artist(s)`) |>
summarise(n_appear = n()) |>
arrange(desc(n_appear))
combined_df <- map(year_vec, scrape_billboard) |> bind_rows()
combined_df |> group_by(`Artist(s)`) |>
summarise(n_appear = n()) |>
arrange(desc(n_appear))
library(DBI)
library(duckdb)
con <- DBI::dbConnect(duckdb::duckdb())
library(tidyverse)
sql <- "
SELECT surface, winner_name, loser_name, w_ace, l_ace, minutes
FROM tennis2019
WHERE minutes > 240
"
dbGetQuery(con, sql)|>
as_tibble()
library(here)
duckdb_read_csv(conn = con, name = "tennis2018",
files = here("data/atp_matches_2018.csv"))
duckdb_read_csv(conn = con, name = "tennis2019",
files = here("data/atp_matches_2019.csv"))
library(tidyverse)
sql <- "
SELECT surface, winner_name, loser_name, w_ace, l_ace, minutes
FROM tennis2019
WHERE minutes > 240
"
dbGetQuery(con, sql)|>
as_tibble()
tennis_db |> group_by(surface) |> summarise(nmatch = n())
library(dbplyr)
tennis_db <- tbl(con, "tennis2019")
tennis_db |> group_by(surface) |> summarise(nmatch = n())
tennis_db |> group_by(surface) |> summarise(nmatch = n()) |>
show_query()
tennis2019
tennis_db |>
filter(tourney_name == "Wimbledon")
## check query:
tennis_db |>
filter(tourney_name == "Wimbledon") |>
show_query()
library(tidyverse)
df <- tibble(x1 = c(1, 7, 4, "..."),
x2 = c(3, 20, 2, "..."),
cat1 = c("Yes", "Yes", "No", "..."))
library(pander)
pander(df)
library(ggplot2)
new_theme_empty <- theme_bw()
new_theme_empty$line <- element_blank()
new_theme_empty$rect <- element_blank()
new_theme_empty$strip.text <- element_blank()
new_theme_empty$axis.text <- element_blank()
nCards <- 30
ruleText <- c("Look for these on the field, in the stands, or in the commercials.\n\"\" indicate that you should listen for the broadcast team to say this phrase.")
freeSpaceText <- "Hyperbole"
wordList <- c("Military\nmetaphor",  # The \n indicates a newline,
"Casual\nsexism",      # so you can insert linebreaks where appropriate.
"\"Matty Ice\"",
"\"Deflategate\"",     # And \" allows you to insert a quotation mark.
"Coin flip:\nheads",
"Coin flip:\ntails",
"Safety",
"Crying\nfan",
"\"I'll tell ya\"",
"Fumble",
"Interception",
"Fourth-down\nconversion",
"Blocked kick",
"Blocked punt",
"Onside kick",
"QB Sack",
"First down",
"\"Rung his\nbell\"",
"Intentional\ngrounding",
"\"We talked\nabout\"",
"Gatorade",
"Horse in a\ncommercial",
"Talking\nanimal",
"Foam finger",
"Painted face",
"Player's\nspouse",
"Owner's\nreaction",
"RB scores\ntouchdown",
"QB scores\ntouchdown",
"WR scores\ntouchdown",
"Defense scores\ntouchdown",
"Holding",
"Offsides",
"Flea-flicker",
"Non-QB\npass",
"Fair catch",
"Challenge\nflag",
"Successful\nchallenge",
"Unsuccessful\nchallenge",
"Pass\ninterference",
"Car\ncommercial",
"Beer\ncommercial",
"Soda\ncommercial",
"Candy\ncommercial",
"30+ yard\nreception",
"10+ yard\nreception",
"30+ yard\nrun",
"10+ yard\nrun",
"5+ yard\nrun",
"Coach throws\nheadset",
"Crying\nplayer",
"Field goal",
"Incomplete\npass",
"2-point\nconversion",
"False start",
"Roger\nGoodell",
"\"Take care\nof the\nfootball\"",
"\"Chip shot\"",
"\"Splits the\nuprights\"",
"Icing the\nkicker",
"\"Two-minute\ndrill\"",
"\"Milk the\nclock\"",
"Pick-six",
"\"Second effort\"",
"\"Field\nposition\"",
"\"Shaken up\"",
"Taking a\nknee",
"Public service\nannouncement")
# Loop
for(ii in 1:nCards){
randomWords <- sample(wordList, 25)
randomWords[13] <- freeSpaceText
plotFrame <- data.frame(x = rep(1:5, 5), y = rep(1:5, each = 5), randomWords)
plotFrame$bgColor <- runif(25, 0.9, 1)
zp1 <- ggplot(plotFrame)
zp1 <- zp1 + geom_rect(xmin = 2.5, xmax = 3.5,
ymin = 2.5, ymax = 3.5,
fill = gray(10/11), lty = 3)
zp1 <- zp1 + geom_rect(aes(xmin = x - 1/2, xmax = x + 1/2,
ymin = y - 1/2, ymax = y + 1/2),
fill = "transparent",
colour = gray(2/3))
zp1 <- zp1 + geom_text(aes(x = x, y = y, label = randomWords),
size = 4)
zp1 <- zp1 + coord_equal() + new_theme_empty
zp1 <- zp1 + scale_fill_identity()
zp1 <- zp1 + ggtitle("Super Bowl bingo",
subtitle = ruleText)
zp1 <- zp1 + scale_x_continuous("", limits = c(0.25, 5.75), breaks = 1:5-1/2)
zp1 <- zp1 + scale_y_continuous("", limits = c(0.25, 5.75), breaks = 1:5-1/2)
zp1 <- zp1 + theme(axis.title.x=element_text(size = rel(8/9)))
ggsave(plot = zp1, paste0("Super Bowl bingo card ", ii, ".png"),
type = "cairo-png", h = 10, w = 7.5)
}
warnings()
nCards <- 3
wordList <- c("Military\nmetaphor",  # The \n indicates a newline,
"Casual\nsexism",      # so you can insert linebreaks where appropriate.
"\"Matty Ice\"",
"\"Deflategate\"",     # And \" allows you to insert a quotation mark.
"Coin flip:\nheads",
"Coin flip:\ntails",
"Safety",
"Crying\nfan",
"\"I'll tell ya\"",
"Fumble",
"Interception",
"Fourth-down\nconversion",
"Blocked kick",
"Blocked punt",
"Onside kick",
"QB Sack",
"First down",
"\"Rung his\nbell\"",
"Intentional\ngrounding",
"\"We talked\nabout\"",
"Gatorade",
"Horse in a\ncommercial",
"Talking\nanimal",
"Foam finger",
"Painted face",
"Player's\nspouse",
"Owner's\nreaction",
"RB scores\ntouchdown",
"QB scores\ntouchdown",
"WR scores\ntouchdown",
"Defense scores\ntouchdown",
"Holding",
"Offsides",
"Flea-flicker",
"Non-QB\npass",
"Fair catch",
"Challenge\nflag",
"Successful\nchallenge",
"Unsuccessful\nchallenge",
"Pass\ninterference",
"Car\ncommercial",
"Beer\ncommercial",
"Soda\ncommercial",
"Candy\ncommercial",
"30+ yard\nreception",
"10+ yard\nreception",
"30+ yard\nrun",
"10+ yard\nrun",
"5+ yard\nrun",
"Coach throws\nheadset",
"Crying\nplayer",
"Field goal",
"Incomplete\npass",
"2-point\nconversion",
"False start",
"Roger\nGoodell",
"\"Take care\nof the\nfootball\"",
"\"Chip shot\"",
"\"Splits the\nuprights\"",
"Icing the\nkicker",
"\"Two-minute\ndrill\"",
"\"Milk the\nclock\"",
"Pick-six",
"\"Second effort\"",
"\"Field\nposition\"",
"\"Shaken up\"",
"Taking a\nknee",
"Public service\nannouncement")
# Loop
for(ii in 1:nCards){
randomWords <- sample(wordList, 25)
randomWords[13] <- freeSpaceText
plotFrame <- data.frame(x = rep(1:5, 5), y = rep(1:5, each = 5), randomWords)
plotFrame$bgColor <- runif(25, 0.9, 1)
zp1 <- ggplot(plotFrame)
zp1 <- zp1 + geom_rect(xmin = 2.5, xmax = 3.5,
ymin = 2.5, ymax = 3.5,
fill = gray(10/11), lty = 3)
zp1 <- zp1 + geom_rect(aes(xmin = x - 1/2, xmax = x + 1/2,
ymin = y - 1/2, ymax = y + 1/2),
fill = "transparent",
colour = gray(2/3))
zp1 <- zp1 + geom_text(aes(x = x, y = y, label = randomWords),
size = 4)
zp1 <- zp1 + coord_equal() + new_theme_empty
zp1 <- zp1 + scale_fill_identity()
zp1 <- zp1 + ggtitle("Super Bowl bingo",
subtitle = ruleText)
zp1 <- zp1 + scale_x_continuous("", limits = c(0.25, 5.75), breaks = 1:5-1/2)
zp1 <- zp1 + scale_y_continuous("", limits = c(0.25, 5.75), breaks = 1:5-1/2)
zp1 <- zp1 + theme(axis.title.x=element_text(size = rel(8/9)))
ggsave(plot = zp1, paste0("Super Bowl bingo card ", ii, ".png"),
type = "cairo-png", h = 10, w = 7.5)
}
?kable
?knitr::kable
