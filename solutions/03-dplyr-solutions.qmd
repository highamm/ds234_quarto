---
title:  "`dplyr` Solutions"
format: 
  html:
    self-contained: true
execute:
  echo: true
  warning: false
  fig-height: 3
---

```{r}
library(babynames)
library(tidyverse)
```

__Exercise 1__. Answers will vary.

```{r}
babynames |> filter(name == "Matteo")
```

__Exercise 2__. 

```{r}
babynames |> filter(year >= 2000)
```

__Exercise 3__. 

```{r}
babynames |> filter(name == "Matteo" & year >= 2000)
```

__Exercise 4__. 

```{r}
babynames |> slice(1:20)
```

__Exercise 5__.

```{r}
babynames |> arrange(desc(prop))
```

__Exercise 6__. 

```{r}
babynames |> arrange(name)
```

It looks like `arrange()` puts the data frame in alphabetical order if the variable is categorical. 

__Exercise 7__.

```{r}
## 1
babynames |> select(year, name, prop)

## 2
babynames |> select(-sex, -n)
```

__Exercise 8__. 

```{r}
babynames_matteo <- babynames |> filter(name == "Matteo")
babynames_matteo
```

__Exercise 9__. 

```{r}
fitness_df <- read_csv(here::here("data/higham_fitness_clean.csv"),
                       col_types = list(stepgoal = col_factor()))
fitness_df |> filter(active_cals > 50)
```



