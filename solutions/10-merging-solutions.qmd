---
title:  "Merging with `dplyr` Solutions"
format: 
  html:
    self-contained: true
execute:
  echo: true
  warning: false
  fig-height: 3
---

```{r}
library(tidyverse)
```

__Exercise 1__.

```{r}
df_test1a <- tibble(xvar = c(1, 2), yvar = c(5, 1))
df_test1b <- tibble(x = c(1, 2), y = c(5, 1))
bind_rows(df_test1a, df_test1b)
```

`R` does not stack the rows because the variables have slightly different names in the two data sets (`x` vs. `xvar` and `y` vs. `yvar`). The following code fixes the issue:

```{r}
df_test1a_rename <- df_test1a |> rename(x = "xvar",
                    y = "yvar")
bind_rows(df_test1a_rename, df_test1b)
```

__Exercise 2__. One join has fewer rows than the other because `birth_df` only has years from 1909 onward. Therefore, a left join `left_join(babynames_df, birth_df,...)` keeps all rows of `babynames_df` but a left join `left_join(birth_df, babynames_df, ...)` removes all years in `babynames_df` that are not in `birth_df` (so observations with years before 1909 are removed).

__Exercise 3__.

a. 5 rows

b. 6 rows

c. 8 rows

d. 3 rows

e. 3 rows

f. 2 rows

