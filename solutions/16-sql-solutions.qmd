---
title:  "`dbplyr` Solutions"
format: 
  html:
    self-contained: true
execute:
  echo: true
  warning: false
  fig-height: 3
---

```{r}
library(DBI)
library(duckdb)
con <- DBI::dbConnect(duckdb::duckdb())

library(here)
duckdb_read_csv(conn = con, name = "tennis2018", 
                files = here("data/atp_matches_2018.csv"))
duckdb_read_csv(conn = con, name = "tennis2019", 
                files = here("data/atp_matches_2019.csv"))
library(tidyverse)

sql <- "
  SELECT surface, winner_name, loser_name, w_ace, l_ace, minutes
  FROM tennis2019 
  WHERE minutes > 240
"
```

__Exercise 1__. The code is keeping any matches that are longer than 240 minutes. It is also getting rid of all of the columns except for those specified in `SELECT`.

__Exercise 2__. The `dplyr` equivalent to `WHERE` is `filter()` while the `dplyr` equivalent to `SELECT` is `select()`.

__Exercise 3__.

```{r}
library(dbplyr)
tennis_db <- tbl(con, "tennis2019")
tennis_db |> group_by(surface) |> summarise(nmatch = n())

tennis_db |> group_by(surface) |> summarise(nmatch = n()) |>
  show_query()
```

__Exercise 4__. 

```{r}
tennis_db |>
  filter(tourney_name == "Wimbledon")

## check query:
tennis_db |>
  filter(tourney_name == "Wimbledon") |>
  show_query()
```


