---
title: "DATA234_Practice"
author: "Jack Sylvia"
format: 
  html:
    output: false
    self-contained: true
---

This assignment will be a good review of using some basic functions in the dplyr package as well as creating some visualizations with ggplot.

In the following exercises, we will be using data from Baseball Savant which provides advanced metrics on MLB competition. Specifically, we will be looking at individual hitter performance on specific types of pitches.

In the data set, each row corresponds to a hitter in Major League baseball. Variables include `last_name`, `first_name`, `team_name_alt` (the team name), `pitch_type` (the type of pitch thrown), `pitch_name`, `pitches` (the number of pitches of that type thrown to that hitter), and many other baseball-specific statistics.

```{r}
#| code-fold: false
#| message: false
#| warning: false
#| output: true
library(tidyverse)
library(here)
Hitter_df <- read_csv(here("data/pitch-arsenal-stats.csv"))
Hitter_df
```

## Section 1

This section will involve quick actions to manipulate the data set. Most of these should be things that you are able to do quickly without looking back at notes / other examples. For each question, I would like you to submit __your original attempt__, before looking at the solution. If you decide to correct your original attempt, copy and paste it in a chunk below so that I can see what you had tried originally.

##### a.

Create a data frame which only includes players whose last name is Taylor.

```{r}
#| code-fold: true
Hitter_df |> filter(last_name == "Taylor")
```

##### b.

Sort the data so that the hitters with the highest run value appear first.

```{r}
#| code-fold: true
Hitter_df |> arrange(desc(run_value))
```

##### c.

Keep only the columns containing player names and the team that they are on.

```{r}
#| code-fold: true
Hitter_df |> select(1, 2, 4)
```

##### d.

Add a new column that shows the difference between a hitter's hard hit percentage (`hard_hit_percent`) and their whiff percentage (`whiff_percent`).

```{r}
#| code-fold: true
#| output: true
Hitter_df |> mutate(diff = hard_hit_percent - whiff_percent) |>
  relocate(diff)
```

<br>

##### e.

Keep only hitters who are on the team Detroit Tigers, which is abbreviated `DET` in the data set.

```{r}
#| code-fold: true
Hitter_df |> filter(team_name_alt == "DET")
```

##### f.

Order the hitters so that those with the lowest slugging percentage, recorded as `slg`, appear first.

```{r}
#| code-fold: true
Hitter_df |> arrange(slg)
```

##### g.

Keep only the first ten observations in the original dataset.

```{r}
#| code-fold: true
Hitter_df |> slice(1:10)
```

<br>

##### h.

Create a dataset that shows MLB teams and their __average__ overall weighted on-base average. Weighted on-base average is recorded as `woba`.

```{r}
#| code-fold: true
Hitter_df |> group_by(team_name_alt) |>
  summarise(
    team_woba = mean(woba)
  )
```

##### i.

Create a histogram of strikeout percentages across all hitters. Stikeout percentage is recorded in the variable `k_percent`.

```{r}
#| code-fold: true
ggplot(data = Hitter_df, aes(x = k_percent)) +
  geom_histogram()
```

##### j.

Keep only observations that have a run value greater than 5 and have a slider (`SL`) pitch type.

```{r}
#| code-fold: true
Hitter_df |> filter(run_value > 5 & pitch_type == "SL") |>
  relocate(run_value, pitch_type)
```

<br>

##### k.

Count the total number of rows for each team in the dataset. In other words, create a table that shows the number of times each `team_name_alt` appears in the data.

```{r}
#| code-fold: true
Hitter_df |> group_by(team_name_alt) |>
  summarise(
    n_hitters = n()
  )
```

##### l.

Find the average `run_value` that hitters provide (ignoring pitch type).

```{r}
#| code-fold: true
Hitter_df |> summarise(
  avg_runvalue = mean(run_value)
)
```

##### m.

Create a variable that takes a hitter's weighted on-base average (`woba`) and divides it by their hard hit percentage (`hard_hit_percent / 100`) (the higher this ratio is, the luckier the hitter has been).

```{r}
#| code-fold: true
#| output: true
Hitter_df |> mutate(Luck_pct = woba / (hard_hit_percent / 100)) |>
  relocate(Luck_pct)
```

##### n.

Create a scatterplot of whiff percentage and hard hit percentage.

```{r}
#| code-fold: true
ggplot(data = Hitter_df, aes(x = hard_hit_percent, y = whiff_percent)) +
  geom_point()
```

<br>

<br>

## Section 2

This section will include questions about what function (or series of functions) you should use. Instead of writing code in this section, you will specify the function(s) in the correct sequence to solve the problem. 

Again, it is __not__ necessary to write all of the code for these, though the solutions do usually show the actual code. What I would like to see is your first attempt at these problems before looking at the answer.

We will also be using a different version of our existing dataframe in this section, called `Hitters_new`. This is shown below:

```{r}
#| message: false
#| warning: false
Hitters_new <- Hitter_df |> 
  group_by(team_name_alt, pitch_type) |>
  summarise(
    med_slg = median(slg)
  )
Hitters_new
```

##### 1.

What function would you use to make the levels of `pitch_type` as their own standalone columns?

```{r}
#| code-fold: true
# pivot wider
```

The new dataframe created from doing this is shown below.

```{r}
#| code-fold: true
Hitters_new2 <- Hitters_new |>
  pivot_wider(names_from = pitch_type, values_from = med_slg)
Hitters_new2
```

##### 2.

Conversely, what function would you use to take column names of pitches from the previous question and return them to just being a single `pitch_type` variable.

```{r}
#| code-fold: true
# pivot longer

```

##### 3.

Imagine that the team column included the full team name for each organization in the MLB (BOS Red Sox, NY Yankees, etc.). What function would you use to create a column of just the location of the team and another column of just the mascot of the team?

```{r}
#| code-fold: true
# separate
```

##### 4.

You want to create a new column that shows whether the `pitch_type` is a slider (recorded as `SL` in the `pitch_type` variable) or not. What two functions would you use to do this?

```{r}
#| code-fold: true
# mutate, with if_else
```

<br>

<br>
