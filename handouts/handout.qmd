---
format: pdf
execute:
  echo: false
  warning: false
---

# DATA/STAT 234 Basic Syntax

The purpose of this series of handouts is to practice writing the basic syntax of some of the functions we will use "by hand." Writing this syntax by hand can help with overall understanding of the code and gives us a resource to glance at when we move to the computer coding section of the material.

## `ggplot2`

Suppose we have the following toy data set, named `df`. The first two columns are numeric while the third column is categorical.

```{r}
library(tidyverse)
df <- tibble(x1 = c(1, 7, 4, "..."),
  x2 = c(3, 20, 2, "..."),
  cat1 = c("Yes", "Yes", "No", "..."))

library(pander)
pander(df)
```

__Basic Plot Structure__. 

&nbsp;

&nbsp;

&nbsp;

&nbsp;

__Inside vs. Outside `aes()` Aesthetics__

&nbsp;

&nbsp;

&nbsp;

&nbsp;

__Global vs. Local Aesthetics__

\pagebreak

## `dplyr`

Suppose we have the following toy data set, named `df`. The first two columns are numeric while the third column is categorical.

```{r}
library(tidyverse)
df <- tibble(x1 = c(1, 7, 4),
  x2 = c(3, NA, 2),
  cat1 = c("Yes", "Yes", "No"))
library(pander)
pander(df)
```

__Choose Rows to Keep with `filter()`__ (based on a condition)

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;

__Choose Rows to Keep with `slice()`__ (based on the row index)

&nbsp;

&nbsp;

__Choose Columns to Keep with `select()`__

\pagebreak

```{r}
pander(df)
```

__Order/Sort Your Data Set with `arrange()`__

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;

__Create New Variables with `mutate()` (Perhaps with `case_when()` or `if_else()`)__

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;

__Obtain Numerical Summaries with `summarise()`__

&nbsp;

&nbsp;

&nbsp;

__Obtain Numerical Summaries by Group with `group_by()` and `summarise()`__

\pagebreak

## Quarto Options

| option | description of the option | default | other choices
| -------| -------------------------------- | ------- | --------------
| `echo` | | | 
|  | | | 
| `eval` | | | 
|  | | | 
| `warning` | | | 
|  | | | 
| `output` | | | 

&nbsp;

__Figure Options__

| option | description of the option | default | other choices
| -------| -------------------------------- | ------- | --------------
| `fig-height` | | |
|  | | | 
| `fig-width` | | | 
|  | | | 

\pagebreak

## `tidyr`

Suppose we have the following toy data set, named `df`, on tennis players. The first column contains the player's max serve speed and handedness, the second contains their rank in the year 1980, and the third contains their rank in the year 1981.

```{r}
library(tidyverse)
df <- tibble(xvar = c("100-RH", "110-LH", "99-RH"),
  Rank1980 = c(2, 30, 31),
  Rank1981 = c(6, 19, 30))
library(pander)
pander(df)
```

__Split One Column into Two with `separate()`__

```{r, echo = FALSE, results = "hide"}
df |> separate(xvar, into = c("speed", "handedness"),
                sep = "-")
df |> pivot_longer(c(Rank1980, Rank1981), names_to = "Year",
                    values_to = "Rank")
```

&nbsp;

&nbsp;

&nbsp;

&nbsp;

__`pivot_longer()` to Gather Multiple Columns__

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;

__`unite()` and `pivot_wider()`__

\pagebreak

## `R` Basics

__Classes__

| Class Type | Name | description of the class type | other notes
| -------| -------------------------------- | ------- | --------------
| `<chr>` | | | 
|  | | | 
| `<fct>`  | | | 
|  | | | 
| `<date>` | | | 
|  | | | 
| `<datetime>` | | | 
|  | | | 
| `<dbl>` | | | 
|  | | | 
| `<int>` | | |
|  | | | 
| `<lgl>` | | | 

\pagebreak

## `forcats`

Suppose we have the following toy data set, named `df`, on the categorical variable `cat1` and the quantitative variable `x`. 

```{r}
library(tidyverse)
df <- tibble(cat = c("A", "B", "C"),
  x = c(2, -1, 14))
library(pander)
pander(df)
```

* Change the names of factor levels with `fct_recode()`:

&nbsp;

&nbsp;

&nbsp;

* Collapse many levels of a factor into fewer levels with `fct_collapse()`

&nbsp;

&nbsp;

&nbsp;

* Order levels of a factor by a quantitative variable with `fct_reorder()`:

&nbsp;

&nbsp;

&nbsp;

&nbsp;

* Manually order the levels of a factor with `fct_relevel()`:

\pagebreak

## Joining with `dplyr`

Suppose we have the following two data sets. The first, `df1` has the variables `id_numb` and `xvar`. The second, `df2` has the variables `id` and `yvar`. `id_numb` and `id` serve as identification variables, possibly with duplicates, where observations from the first data set with `id_numb = 1` correspond to observations in the second data set with `id = 1`.

```{r}
library(tidyverse)
df1 <- tibble(id_numb = c(1, 1, 2, 4),
  xvar = c(16, -1, 11, 13))
df2 <- tibble(id = c(1, 2, 2, 3),
              yvar = c(-1, -4, 0, -9))
library(pander)
df1 |> pander()
df2 |> pander()
```

```{r, results = "hide"}
## mutate joins
left_join(df1, df2, by = c("id_numb" = "id"))
left_join(df2, df1, by = c("id" = "id_numb")) ## equivalent to right_join
inner_join(df1, df2, by = c("id_numb" = "id"))
full_join(df1, df2, by = c("id_numb" = "id"))

## filter joins
anti_join(df1, df2, by = c("id_numb" = "id"))
semi_join(df1, df2, by = c("id_numb" = "id"))

## difference between left_join() and semi_join()
## difference between full_join() and inner_join()
```

##### Mutating Joins

* `left_join()`

&nbsp;

&nbsp;

&nbsp;

&nbsp;

* `right_join()`

&nbsp;

&nbsp;

&nbsp;

* `inner_join()`

\pagebreak

```{r}
df1 |> pander()
df2 |> pander()
```

* `full_join()`

&nbsp;

&nbsp;

&nbsp;

##### Filtering Joins

* `semi_join()`

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;

* `anti_join()`

\pagebreak

## `lubridate`

Suppose we have the following data set, named `df`, which has various date formats, as `<chr>` variables. 

```{r}
library(tidyverse)
library(lubridate)
library(pander)
df <- tibble(date1 = c("January 14, 1992", "October 19, 1991"),
       date2 = c("1992-January-14", "1991-October-19"),
       date3 = c("01/14/1992", "10/19/1991"))
df |> pander()
```

`dmy()`, `dym()`, `mdy()`, `myd()`, `ydm()`, `ymd()` to Convert to a `<date>`

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;

Now suppose we have a data set, called `df2`, that has a `<date>` variable:

```{r}
df |> mutate(date1 = mdy(date1)) |> select(date1) |> pander()
```

`year()`, `month()`, `mday()` `yday()`, and `wday()` to Pull Useful Variables from a `<date>`

\pagebreak

## `stringr`

Suppose we have the following data set with a variable of strings (of recent Wordle solutions) called `df1`. Our example is small, but you might think of each variable as containing lyrics to a song or the text of a book or essay.

```{r, results = "as.is"}
library(tidyverse)
library(pander)
df1 <- tibble(strings_var1 = c("Stale", "dream", "photo", "Aloud", "Inept"))
pander(df1)
```

The following are just a few functions from the `stringr` package to manipulate strings.

`str_to_lower()` / `str_to_upper()` / `str_to_title()`

```{r, echo = FALSE, eval = FALSE}
#| results: false
df1 |> mutate(strings_var_lower = str_to_lower(strings_var1))
```

&nbsp;

&nbsp;

Most `stringr` functions will require you to specify a `pattern` in the string, called a __regex__ (regular expression) that the `stringr` function will extract, detect, replace, etc.

`str_detect()` to Detect whether a String has a Certain Pattern

```{r}
#| results: false
df1 |> mutate(strings_a = str_detect(strings_var1, pattern = "a"))
```

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;

Using `^` and `$` in `str_detect()` 

```{r}
#| results: false
df1 |> mutate(strings_a = str_detect(strings_var1, pattern = "^d"))
df1 |> mutate(strings_a = str_detect(strings_var1, pattern = "d$"))
```

&nbsp;

&nbsp;

&nbsp;

&nbsp;

\pagebreak

`str_replace_all()` to replace a regex pattern with a new string

```{r}
#| results: false
df1 |> mutate(no_o = str_replace_all(strings_var1,
                                     pattern = "o", replacement = ""))
```

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;

`str_remove()` to Remove a Pattern from a String

```{r}
#| results: false
df1 |> mutate(strings_var_rem = str_remove(strings_var1, pattern = "ing"))
```

&nbsp;

&nbsp;


`str_sub()` to grab certain parts of a string.

```{r}
#| results: false
df1 |> mutate(string_small = str_sub(strings_var1, start = 1, end = 2))
## similar to separate()
```

&nbsp;

&nbsp;

&nbsp;

&nbsp;

There are a lot of different patterns to regexes. For example, we can also use `.` to match any character, `\d` to match any digit, `\s` to match any whitespace, `[abc]` to match a, b, or c, and `[^abc]` to match anything except a, b, or c, etc.



