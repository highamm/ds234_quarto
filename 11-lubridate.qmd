# Dates with `lubridate` {#lubridate}

```{r}
#| echo: false
source("_common.R")
```

__Goals__:

* use `lubridate` functions to convert a character variable to a `<date>` variable.
* use `lubridate` functions to extract useful information from a `<date>` variable, including the year, month, day of the week, and day of the year.

## Converting Variables to `<date>` 

The `lubridate` package is built to easily work with `Date` objects and `DateTime` objects. `R` does not actually have a class that stores `Time` objects (unless you install a separate package). Dates tend to be much more common than Times, so, we will primarily focus on Dates, but most functions we will see have easy extensions to Times.

To begin, install the `lubridate` package, and load the package with `library()`. The `today()` function prints today's date while `now()` prints today's date and time. These can sometimes be useful in other contexts, but we will just run the code to see how `R` stores dates and date-times.

```{r, message = FALSE, appendix = TRUE}
library(tidyverse)
library(lubridate)
today()
now()
```

This first section will deal with how to convert a variable in `R` to be a `Date`. We will use a data set that has the holidays of Animal Crossing from January to April. The columns in this data set are:

* `Holiday`, the name of the holiday and
* various other columns with different date formats

Read in the data set with

```{r, message = FALSE, appendix = TRUE}
library(here)
holiday_df <- read_csv(here("data/animal_crossing_holidays.csv"))
holiday_df
```

Which columns were specified as Dates? In this example, none of the columns have the `<date>` specification: all of the date columns are read in as character variables.

### From `<chr>` to `<date>`

We will use the `dmy()` series of functions in `lubridate` to convert character variables to dates. 

There are a series of `dmy()`-type variables, each corresponding to a different Day-Month-Year order. 

* `dmy()` is used to parse a date from a character vector that has the day first, month second, and year last.
* `ymd()` is used to parse a date that has year first, month second, and date last
* `ydm()` is used to parse a date that has year first, day second, and month last,....

and `dym()`, `mdy()`, and `myd()` work similarly. `lubridate` is usually "smart" and picks up dates in all kinds of different formats (e.g. it can pick up specifying `October` as the month and `Oct` as the month and `10` as the month).

::: {.callout-important}
## Important

We will typically pair these `lubridate` functions with a `mutate()` statement: much like the `forcats` functions, we are almost always __creating__ a new variable.
:::

Let's try it out on `Date1` and `Date2`:

```{r, appendix = TRUE}
holiday_df |> mutate(Date_test = dmy(Date1)) |>
  select(Date_test, everything())
holiday_df |> mutate(Date_test = mdy(Date2)) |>
  select(Date_test, everything())
```

__A Reminder__: Why do `<date>` objects even matter? Compare the following two plots: one made where the date is in `<chr>` form and the other where date is in its appropriate `<date>` form. 

```{r, appendix = TRUE}
ggplot(data = holiday_df, aes(x = Date1, y = Holiday)) +
  geom_point() + 
  theme_minimal()

holiday_df <- holiday_df |> mutate(Date_test_plot = dmy(Date1)) |>
  select(Date_test_plot, everything())
ggplot(data = holiday_df, aes(x = Date_test_plot, y = Holiday)) +
  geom_point() +
  theme_minimal()
```

In which plot does the ordering on the x-axis make more sense?

### Making a `<date>` variable from Date Components

Another way to create a Date object is to assemble it with `make_date()` from a month, day, and year components, each stored in a separate column:

```{r, appendix = TRUE}
holiday_df |> mutate(Date_test2 = make_date(year = Year,
                                             month = Month,
                                             day = Day)) |>
  select(Date_test2, everything())
```

But, when `Month` is stored as a character (e.g. `February`) instead of a number (e.g. `2`), problems arise with the `make_date()` function:

```{r, appendix = TRUE}
holiday_df |> mutate(Date_test2 = make_date(year = Year,
                                             month = Month2,
                                             day = Day)) |>
  select(Date_test2, everything())
```

So the `make_date()` function requires a specific format for the year, month, and day columns. It may take a little pre-processing to put a particular data set in that format.

__Exercise 1__. What's the issue with trying to convert `Date4` to a `<date>` form? You may want to investigate `Date4` further to answer this question.

```{r}
holiday_df |> mutate(Date_test = ymd(Date4)) |>
  select(Date_test, everything())
```

__Exercise 2__. Practice converting `Date3` and `Date5` to `<date>` variables with `lubridate` functions.

## Functions for `<date>` Variables

Once an object is in the `<date>` format, there are some special functions in `lubridate` that can be used on that date variable. To investigate some of these functions, we will pull stock market data from Yahoo using the `quantmod` package. Install the package, and run the following code, which gets stock market price data on Apple, Nintendo, Chipotle, and the S & P 500 Index from 2011 to now. 

::: {.callout-note}
## Note

We have the ability to understand all of the code below, but we will skip over this code for now to focus more on the new information in this section (information about date functions).
:::

```{r, message = FALSE, appendix = TRUE}
## install.packages("quantmod")
library(quantmod)

start <- ymd("2011-01-01")
end <- ymd("2021-5-19")
getSymbols(c("AAPL", "NTDOY", "CMG", "SPY"), src = "yahoo",
           from = start, to = end)

date_tib <- as_tibble(index(AAPL)) |>
  rename(start_date = value)
app_tib <- as_tibble(AAPL)
nint_tib <- as_tibble(NTDOY)
chip_tib <- as_tibble(CMG)
spy_tib <- as_tibble(SPY)
all_stocks <- bind_cols(date_tib, app_tib, nint_tib, chip_tib, spy_tib)

stocks_long <- all_stocks |>
  select(start_date, AAPL.Adjusted, NTDOY.Adjusted,
                      CMG.Adjusted, SPY.Adjusted) |>
  pivot_longer(2:5, names_to = "Stock_Type", values_to = "Price") |>
  mutate(Stock_Type = fct_recode(Stock_Type,
                                 Apple = "AAPL.Adjusted",
                                 Nintendo = "NTDOY.Adjusted",
                                 Chipotle = "CMG.Adjusted",
                                 `S & P 500` = "SPY.Adjusted"
                                 ))
tail(stocks_long)
```

You'll have a chance in class to choose your own stocks to investigate. For now, we've made a data set with three variables:

* `start_date`, the opening date for the stock market
* `Stock_Type`, a factor with 4 levels: `Apple`, `Nintendo`, `Chipotle`, and `S & P 500`
* `Price`, the price of the stock?

First, let's make a line plot that shows how the S & P 500 has changed over time:

```{r, appendix = TRUE}
stocks_sp <- stocks_long |> filter(Stock_Type == "S & P 500")
ggplot(data = stocks_sp, aes(x = start_date, y = Price)) +
  geom_line() +
  theme_minimal()
```

But, there's other information that we can get from the `start_date` variable. We might be interested in things like day of the week, monthly trends, or yearly trends. To extract variables like "weekday" and "month" from a `<date>` variable, there are a series of functions that are fairly straightforward to use. We will discuss the `year()` `month()`, `mday()`, `yday()`, and `wday()` functions.

### `year()`, `month()`, and `mday()` 

The functions `year()`, `month()`, and `mday()` can grab the year, month, and day of the month, respectively, from a `<date>` variable. 

::: {.callout-note}
## Note

Like the `forcats` functions and the earlier `lubridate` functions, the `year()`, `month()`, and `mday()` functions will almost always be paired with a `mutate()` statement because they will create a new variable.
:::

```{r, results = "hide", appendix = TRUE}
stocks_long |> mutate(year_stock = year(start_date))
stocks_long |> mutate(month_stock = month(start_date))
stocks_long |> mutate(day_stock = mday(start_date))
```

### `yday()` and `wday()`

The `yday()` function grabs the day of the year from a `<date>` object. For example,

```{r, appendix = TRUE}
test <- mdy("November 4, 2020")
yday(test)
```

returns `309`, indicating that November 4th is the 309th day of the year 2020. Using this function in a `mutate()` statement creates a new variable that has `yday` for each observation:

```{r, appendix = TRUE}
stocks_long |> mutate(day_in_year = yday(start_date))
```

Finally, the function `wday()` grabs the day of the week from a `<date>`. By default, `wday()` puts the day of the week as a numeric, but I find this confusing, as I can't ever remember whether a `1` means `Sunday` or a `1` means `Monday`. Adding, `label = TRUE` creates the weekday variable as `Sunday`, `Monday`, `Tuesday`, etc.:

```{r, results = "hide", appendix = TRUE}
stocks_long |> mutate(day_of_week = wday(start_date))
stocks_long |> mutate(day_of_week = wday(start_date,
                                          label = TRUE, abbr = FALSE))
```

Possible uses for these functions are:

* we want to look at differences between years (with `year()`)

* we want to look at differences between months (with `month()`)

* we want to look at differences between days of the week (with `wday()`)

* we want to see whether there are yearly trends __within years__ (with `yday()`)

::: {.callout-note}
## Note

Working with times is extremely similar to working with dates. Instead of `ymd()`, `mdy()`, etc., you tack on a few extra letters to specify the order that the hour, minute, and seconds appear in the variable: `ymd_hms()` converts a character vector that has the order year, month, day, hour, minute, second to a `<datetime>`.

Additionally, the functions `hour()`, `minute()`, and `second()` grab the hour, minute, and second from a `<datetime>` variable.
:::


::: {.callout-note}
## Note

Things can get complicated with dates and times, especially if you start to consider things like time __duration__. Consider how the following might affect an analysis involving time duration:

* time zones
* leap years (not all years have the same number of days)
* differing number of days in a given month
* daylight saving time (not all days have the same number of hours)
:::

__Exercise 3__. The `month()` function gives the numbers corresponding to each month by default. Type `?month` and figure out which argument you would need to change to get the __names__ (January, February, etc.) instead of the month numbers. What about the __abbreviations__ (Jan, Feb, etc.) of each month instead of the month numbers? Try making the changes in the `mutate()` statement below.

```{r, results = "hide"}
stocks_long |> mutate(month_stock = month(start_date))
```

## Practice

### Class Exercises

Examine the `ds_google.csv` data, which contains

* `Month`, the year and month from 2004 to now
* `Data_Science`, the relative popularity of data science (Google keeps how it calculates "popularity" as somewhat of a mystery but it is likely based off of the number of times people search for the term "Data Science")

```{r, message = FALSE}
library(tidyverse)
library(lubridate)
ds_df <- read_csv(here("data/ds_google.csv"))
ds_df
```

__Class Exercise 1__. Use a `lubridate` function to convert the `Month` variable to be in the `<date>` format. Note that, in addition to `mdy()`, `dmy()`, `ymd()`, etc., there are also functions in lubridate like `md()`, `dm()`, and `ym()` that are useful if only two of the three parts of a date are present in a variable. 

After converting the `Month` variable to a date, figure out what `R` does for the "day" part of the date when it's not specified in the original variable.

__Class Exercise 2__. Make a plot of the popularity of Data Science through Time. Add a smoother to your plot. What patterns do you notice?

__Class Exercise 3__. Modify the code in the tutorial section on the Stocks data to get a data frame on stock prices for the now infamous Gamestop stock. Construct a line plot of the price through time.

__Class Exercise 4__. Choose __one__ stock and use the `lag()` function to create a new variable that is the previous day's stock price for that stock. For what proportion of days was the stock's closing price __higher__ than it was at close for the day before (indicating that someone who bought shares on Day xxx would have made money at the end of Day xxx + 1).

```{r}
#| echo: false
#| output: false
library(quantmod)

start <- ymd("2011-01-01")
end <- ymd("2021-5-19")
getSymbols(c("AAPL", "NTDOY", "CMG", "SPY"), src = "yahoo",
           from = start, to = end)

date_tib <- as_tibble(index(AAPL)) |>
  rename(start_date = value)
app_tib <- as_tibble(AAPL)
nint_tib <- as_tibble(NTDOY)
chip_tib <- as_tibble(CMG)
spy_tib <- as_tibble(SPY)
all_stocks <- bind_cols(date_tib, app_tib, nint_tib, chip_tib, spy_tib)

stocks_long <- all_stocks |>
  select(start_date, AAPL.Adjusted, NTDOY.Adjusted,
                      CMG.Adjusted, SPY.Adjusted) |>
  pivot_longer(2:5, names_to = "Stock_Type", values_to = "Price") |>
  mutate(Stock_Type = fct_recode(Stock_Type,
                                 Apple = "AAPL.Adjusted",
                                 Nintendo = "NTDOY.Adjusted",
                                 Chipotle = "CMG.Adjusted",
                                 `S & P 500` = "SPY.Adjusted"
                                 ))
tail(stocks_long)
stocks_long <- stocks_long |> filter(Stock_Type == "Chipotle") |>
  mutate(price_lag = lag(Price)) |>
  mutate(diff = Price - price_lag)
stocks_long |> mutate(gain_or_loss = if_else(diff > 0,
                      true = 1,
                      false = 0)) |>
  summarise(prop_gain = mean(gain_or_loss, na.rm = TRUE))
```

__Class Exercise 5__. Those interested in finance/economics might see the naivety of the approach above: usually, the stock market is more thought of as a long-term investment, not a day-to-day investment. For the stock that you selected, adjust your analysis so that you compute the proportion of weeks that a stock's closing price was __higher__ than it was at close the week before. To simplify things a little, you should only compute this proportion for __Wednesdays__ (and drop the rest of the data).

```{r}
#| echo: false
#| eval: false

stocks_long |> mutate(day_of_week = wday(start_date, label = TRUE)) |>
  filter(day_of_week == "Wed") |>
  mutate(price_lag = lag(Price)) |>
  mutate(diff = Price - price_lag) |>
  mutate(gain_or_loss = if_else(diff > 0,
                      true = 1,
                      false = 0)) |>
  summarise(prop_gain = mean(gain_or_loss, na.rm = TRUE))
```

__Class Exercise 6__. Those interested in finance/economics might see the naivety of the approach above: usually, the stock market is more thought of as a long-term investment, not a week-to-week investment. For the stock that you selected, adjust your analysis so that you compute the proportion of months that a stock's closing price was __higher__ than it was at close the month before. To simplify things a little, you should only compute this proportion for __the first day of each month__ (and drop the rest of the data).

```{r}
#| echo: false
#| eval: false

stocks_long |> mutate(month = month(start_date),
                      year = year(start_date)) |>
  group_by(month, year) |>
  slice(1) |>
  arrange(year, month) |>
  ungroup() |>
  mutate(price_lag = lag(Price)) |>
  mutate(diff = Price - price_lag) |>
  mutate(gain_or_loss = if_else(diff > 0,
                      true = 1,
                      false = 0)) |>
  summarise(prop_gain = mean(gain_or_loss, na.rm = TRUE))
```


### Your Turn

The data in the Class Exercises was obtained from Google Trends: <a href="https://trends.google.com/trends/?geo=US" target="_blank">Google Trends</a>. Google Trends is incredibly cool to explore, even without `R`. 

__Your Turn 1__. On Google Trends, Enter in a search term, and change the Time dropdown menu to be 2004-present. Then, enter in a second search term that you want to compare. You can also change the country if you want to (or, you can keep the country as United States).   

::: {.callout-note}
## Note

My search terms will be "super smash" and "animal crossing", but yours should be something that interests you!
:::

In the top-right window of the graph, you should click the down arrow to download the data set. Delete the first two rows of your data set (either in Excel or `R`), read in the data set, and change the date variable so that it's in a Date format.

```{r, echo = FALSE, message = FALSE}
videogame_df <- read_csv(here("data/smash_animal_crossing.csv"))
videogame_df <- videogame_df |> mutate(date = ymd(Month, truncated = 1))
```

__Your Turn 2__. Make a plot of your Popularity variables through time.

::: {.callout-tip collapse="true"}
## Hint (only if you get stuck)

You will need to use a function from `tidyr` to tidy the data set first.
:::

```{r, echo = FALSE, fig.keep = "none"}
videogame_long <- videogame_df |>
  pivot_longer(cols = c("super_smash", "animal_crossing"),
                              names_to = "game",
                              values_to = "popularity")
ggplot(data = videogame_long, aes(x = date, 
                                  y = popularity,
                                  colour = game)) +
  geom_line() +
  scale_colour_viridis_d(begin = 0, end = 0.9) +
  theme_minimal()
```

__Your Turn 3__. Using your data set that explored a variable or two from 2004 through now, make a table of the __average__ popularity for each year.

::: {.callout-tip collapse="true"}
## Hint (only if you get stuck)

You'll need a `lubridate` function to extract the year variable from the date object.
:::

__Your Turn 4__. Clear your search and now enter a search term that you'd like to investigate for the past 90 days.

Again, click the download button again and read in the data to `R`. Convert the date variable to be in `<date>` format.

```{r, message = FALSE, echo = FALSE}
steelers_df <- read_csv(here("data/steelers.csv"))
steelers_df <- steelers_df |> mutate(day_var = mdy(Day))
```

__Your Turn 5__. Make a plot of your popularity variable through time, adding a smoother.

```{r, echo = FALSE, fig.keep = "none", message = FALSE}
ggplot(data = steelers_df, aes(x = day_var, y = Steelers)) +
  geom_smooth() + 
  geom_line() +
  labs(y = "Popularity") +
  theme_minimal()
```

<!-- __Your Turn 6__. Using your data set that explored a variable from the past 90 days, construct a table that compares the __average__ popularity on each day of the week (Monday through Saturday).  -->

<!-- __Your Turn 7__. Examine the `ds_df` data set again, the data set on data science in Google Trends, and suppose that you have an observation for __each__ day of every year (not just one observation per month). You want to look at whether data science is more popular on certain days of the week. Explain why the following strategy __wouldn't__ really work that well.  -->

<!-- * create a weekday variable with `wday()` -->
<!-- * use `summarise()` and `group_by()` to find the average popularity for each day of the week -->

