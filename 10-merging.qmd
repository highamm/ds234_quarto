# Merging with `dplyr`

__Goals:__

* use `bind_rows()` to stack two data sets and `bind_cols()` to merge two data sets.

* identify __keys__ in two related data sets.

* use the mutating join functions in `dplyr` to merge two data sets by a key.

* use the filtering join functions in `dplyr` to filter one data set by values in another data set.

* apply the appropriate `join()` function for a given problem and context.

## Stacking Rows and Appending Columns

### Stacking with `bind_rows()`

First, we will talk about combining two data sets by "stacking" them on top of each other to form one new data set. The `bind_rows()` function can be used for this purpose __if__ the two data sets have identical column names.

A common instance where this is useful is if two data sets come from the same source and have different locations or years, but the same exact column names.

For example, examine the following website and notice how there are .csv files given for each year of matches in the ATP (Association of (men's) Tennis Professionals). <a href="https://github.com/JeffSackmann/tennis_atp" target="_blank">https://github.com/JeffSackmann/tennis_atp</a>.

Then, read in the data sets, and look at how many columns each has.

```{r, message = FALSE, warning = FALSE, results = "hide", appendix = TRUE}
library(tidyverse)
library(here)
atp_2019 <- read_csv(here("data/atp_matches_2019.csv"))
atp_2018 <- read_csv(here("data/atp_matches_2018.csv"))
head(atp_2019) 
head(atp_2018)
```

To combine results from both data sets,

```{r, error = TRUE}
atp_df <- bind_rows(atp_2018, atp_2019)
```

What happens? Can you fix the error? __Hint__: run

```{r, eval = FALSE, appendix = TRUE}
spec(atp_2018)
```

to get the full column specifications and use your `readr` knowledge to change a couple of the column types. We also did not discuss this, but, when using the `col_type` argument in `read_csv()`, you don't need to specify all of the column types. Just specifying the ones that you want to change works too. The following code forces the seed variables in the 2018 data set to be characters.

```{r, message = FALSE, appendix = TRUE}
atp_2018 <- read_csv(here("data/atp_matches_2018.csv"),
                     col_types = cols(winner_seed = col_character(),
                                      loser_seed = col_character()))
```

We can try combining the data sets now.

```{r, results = "hide", appendix = TRUE}
atp_df <- bind_rows(atp_2018, atp_2019)
atp_df
```

Do a quick check to make sure the number of rows in `atp_2018` plus the number of rows in `atp_2019` equals the number of rows in `atp_df`.

It might seem a little annoying, but, by default `bind_rows()` will only combine two data sets by stacking rows if the data sets have __identical__ column names and __identical__ column classes, as we saw in the previous example. 

Now run the following and look at the output.

```{r, appendix = TRUE}
df_test2a <- tibble(xvar = c(1, 2))
df_test2b <- tibble(xvar = c(1, 2), y = c(5, 1))
bind_rows(df_test2a, df_test2b)
```

Is this the behavior you would expect?

<br>

### Binding Columns with `bind_cols()`

We won't spend much time talking about how to bind together columns because it's generally a little dangerous. 

We will use a couple of test data sets, `df_test1a` and `df_test1b`, to see it in action:

```{r, appendix = TRUE}
df_test1a <- tibble(xvar = c(1, 2), yvar = c(5, 1))
df_test1b <- tibble(x = c(1, 2), y = c(5, 1))
bind_cols(df_test1a, df_test1b)
```

For a larger data set, why might this be a dangerous way to combine data? What must you be sure of about the way the data was collected in order to combine data in this way?

### Exercises {#exercise-10-1}

Exercises marked with an \* indicate that the exercise has a solution at the end of the chapter at \@ref(solutions-10).

1. \* Run the following and explain why `R` does not simply stack the rows. Then, fix the issue with the `rename()` function.

```{r}
df_test1a <- tibble(xvar = c(1, 2), yvar = c(5, 1))
df_test1b <- tibble(x = c(1, 2), y = c(5, 1))
bind_rows(df_test1a, df_test1b)
```

## Mutating Joins

If the goal is to combine two data sets using some common variable(s) that both data sets have, we need different tools than simply stacking rows or appending columns. When merging together two or more data sets, we need to have a matching identification variable in each data set. This variable is commonly called a __key__. A key can be an identification number, a name, a date, etc, but must be present in both data sets. 

As a simple first example, consider

```{r, appendix = TRUE}
library(tidyverse)
df1 <- tibble(name = c("Emily", "Miguel", "Tonya"), fav_sport = c("Swimming", "Football", "Tennis"))
df2 <- tibble(name = c("Tonya", "Miguel", "Emily"),
              fav_colour = c("Robin's Egg Blue", "Tickle Me Pink", "Goldenrod"))
```

Our goal is to combine the two data sets so that the people's favorite sports and favorite colours are in one data set.

Identify the `key` in the example above. Why can we no longer use `bind_cols()` here?

### Keep All Rows of Data Set 1 with `left_join()`

Consider the `babynames` `R` package, which has the following data sets:

* `lifetables`: cohort life tables for different `sex` and different `year` variables, starting at the year 1900.
* `births`: the number of births in the United States in each year, since 1909
* `babynames`: popularity of different baby names per year and sex since the year 1880.

```{r, results = "hide", appendix = TRUE}
##install.packages("babynames")
library(babynames)
life_df <- babynames::lifetables
birth_df <- babynames::births
babynames_df <- babynames::babynames
head(babynames)
head(births)
head(lifetables)
```

Read about each data set with `?babynames`, `?births` and `?lifetables`.

Suppose that you want to combine the `births` data set with the `babynames` data set, so that each row of `babynames` now has the total number of births for that year. We first need to identify the key in each data set that we will use for the joining. In this case, each data set has a `year` variable, and we can use `left_join()` to keep all observations in `babynames_df`, even for years that are not in the `births_df` data set.

```{r, appendix = TRUE}
combined_left <- left_join(babynames_df, birth_df, by = c("year" = "year"))
head(combined_left)
tail(combined_left)
```

Why are `births` missing in `head(combined_left)` but not in `tail(combined_left)`?

### Keep All Rows of Data Set 2 with `right_join()`

Recall from the accompanying handout that there is no need to ever use `right_join()` because it is the same as using a `left_join()` with the first two data set arguments switched:

```{r, appendix = TRUE}
## these will always do the same exact thing
right_join(babynames_df, birth_df, by = c("year" = "year"))
left_join(birth_df, babynames_df, by = c("year" = "year"))
```

Therefore, it's usually easier to just always use `left_join()` and ignore `right_join()` completely. 

### Keep All Rows of Both Data Sets with `full_join()`

In addition to keeping any rows with a matching key in the other data frame, a `full_join()` will keep all rows in data set 1 that don't have a matching key in data set 2, and will also keep all rows in data set 2 that don't have a matching key in data set 1, filling in `NA` for missing values when necessary. For our example of merging `babynames_df` with `birth_df`,

```{r, results = "hide", appendix = TRUE}
full_join(babynames_df, birth_df, by = c("year" = "year"))
```

### Keep Only Rows with Matching Keys with `inner_join()`

We can also keep only rows with matching keys with `inner_join()`. For this join, any row in data set 1 without a matching key in data set 2 is dropped, and any row in data set 2 without a matching key in data set 1 is also dropped.

```{r, appendix = TRUE}
inner_join(babynames_df, birth_df, by = c("year" = "year"))
```

<br>

### Which `xxxx_join()`?

Which join function we use will depend on the context of the data and what questions you will be answering in your analysis. Most importantly, if you're using a `left_join()`, `right_join()` or `inner_join()`, you're potentially cutting out some data. It's important to be aware of what data you're omitting. For example, with the `babynames` and `births` data, we would want to keep a note that a `left_join()` removed all observations before 1909 from joined data set. 

### The Importance of a Good Key

The key variable is very important for joining and is not always available in a "perfect" form. Recall the college majors data sets we have, called `slumajors_df`, which information on majors at SLU. Another data set, `collegemajors_df`, has different statistics on college majors nationwide. There's lots of interesting variables in these data sets, but we'll focus on the `Major` variable here. Read in and examine the two data sets with:

```{r, message = FALSE, appendix = TRUE}
slumajors_df <- read_csv(here("data/SLU_Majors_15_19.csv"))
collegemajors_df <- read_csv(here("data/college-majors.csv"))
head(slumajors_df)
head(collegemajors_df)
```

The most logical key for joining these two data sets is `Major`,  but joining the data sets won't actually work. The following is an attempt at using `Major` as the key.

```{r, appendix = TRUE}
left_join(slumajors_df, collegemajors_df, by = c("Major" = "Major"))
```

Why did the `collegemajors_df` give only `NA` values when we tried to merge by major?

This example underscores the importance of having a key that matches __exactly__. Some, but not all, of the issues involved in joining these two data sets can be solved with functions in the `stringr` package (discussed in a few weeks). For example, the capitalization issue can be solved with the `str_to_title()` function, which converts that all-caps majors in `collegemajors_df` to majors where only the first letter of each word is capitalized:

```{r, appendix = TRUE}
collegemajors_df <- collegemajors_df |>
  mutate(Major = str_to_title(Major))
left_join(slumajors_df, collegemajors_df)
```

As we can see, this solves the issue for some majors but others still have different naming conventions in the two data sets.

### Exercises {#exercise-10-2}

Exercises marked with an \* indicate that the exercise has a solution at the end of the chapter at \@ref(solutions-10).

1. Examine the following two joins that we've done, and explain why one resulting data set has fewer observations (rows) than the other.

```{r}
left_join(babynames_df, birth_df, by = c("year" = "year"))
left_join(birth_df, babynames_df, by = c("year" = "year"))
```

2. Evaluate whether the following statement is true or false: an `inner_join()` will always result in a data set with the same or fewer rows than a `full_join()`.

3. Evaluate whether the following statement is true or false: an `inner_join()` will always result in a data set with the same or fewer rows than a `left_join()`.

4. Evaluate whether the following statement is true or false: a `left_join()` will always result in a data set with the same number of rows as a `semi_join()` on the same two data sets.

## Filtering Joins

Filtering joins (`semi_join()` and `anti_join()`) are useful if you would only like to keep the variables in one data set, but you want to filter out observations by a variable in the second data set.

Consider again the two data sets on men's tennis matches in 2018 and in 2019.

```{r, message = FALSE, appendix = TRUE}
atp_2019 <- read_csv(here("data/atp_matches_2019.csv"))
atp_2018 <- read_csv(here("data/atp_matches_2018.csv"))
atp_2019
atp_2018
```

### Filtering with `semi_join()` 

Suppose that we only want to keep matches in 2019 where the winning player had 10 or more wins in 2018. This might be useful if we want to not consider players in 2018 that only played in a couple of matches, perhaps because they got injured or perhaps because they received a special wildcard into the draw of only one event.

To accomplish this, we can first create a data set that has the names of all of the players that won 10 or more matches in 2018, using functions that we learned from `dplyr` earlier in the semester:

```{r, appendix = TRUE}
win10 <- atp_2018 |> group_by(winner_name) |>
  summarise(nwin = n()) |> 
  filter(nwin >= 10)
win10
```

Next, we apply `semi_join()`, which takes the names of two data sets (the second is the one that contains information about how the first should be "filtered"). The third argument gives the name of the key (`winner_name`) in this case.

```{r, results = "hide", appendix = TRUE}
tennis_2019_10 <- semi_join(atp_2019, win10,
                            by = c("winner_name" = "winner_name"))
tennis_2019_10$winner_name
```

Note that this only keeps the matches in 2019 where the __winner__ had 10 or more match wins in 2018. It drops any matches where the __loser__ lost against someone who did not have 10 or more match wins in 2018. So this isn't yet perfect and would take a little more thought into which matches we actually want to keep for a particular analysis.

### Filtering with `anti_join()`

Now suppose that we want to only keep the matches in 2019 where the winning player did not have __any__ wins in 2018. We might think of these players as "emerging players" in 2019, players who are coming back from an injury, etc.. To do this, we can use `anti_join()`, which only keeps the rows in the first data set that do __not__ have a match in the second data set.

```{r, results = "hide", appendix = TRUE}
new_winners <- anti_join(atp_2019, atp_2018,
                         by = c("winner_name" = "winner_name")) 
new_winners$winner_name
```

We can then examine how many wins each of these "new" (or perhaps previously injured) players had in 2019:

```{r, appendix = TRUE}
new_winners |> group_by(winner_name) |>
  summarise(nwin = n()) |>
  arrange(desc(nwin))
```

The filtering join functions are useful if you want to filter out observations by some criterion in a different data set.

### Exercises {#exercise-10-3}

1. Examine the following data sets (the first is `df1` and the second is `df2`) and then, without running any code, answer the following questions.

```{r, echo = FALSE, results = "show"}
df1 <- tibble(id = c("A", "B", "C", "E", "F"), xvar = c(1, 2, 3, 1, 2))
df2 <- tibble(id = c("A", "C", "D", "E", "G", "H"), yvar = c(2, 1, 2, 1, 1, 4))
library(pander)
pander(df1)
pander(df2)
```

a. How many rows would be in the data set from `left_join(df1, df2, by = c("id" = "id"))`?

```{r, echo = FALSE}
## 5 
```

b. How many rows would be in the data set from `left_join(df2, df1, by = c("id" = "id"))`?

```{r, echo = FALSE}
## 6
```

c. How many rows would be in the data set from `full_join(df1, df2, by = c("id" = "id"))`?

```{r, echo = FALSE}
## 8
```

d. How many rows would be in the data set from `inner_join(df1, df2, by = c("id" = "id"))`?

```{r, echo = FALSE}
## 3
```

e. How many rows would be in the data set from `semi_join(df1, df2, by = c("id" = "id"))`?

```{r, echo = FALSE}
## 3
```

f. How many rows would be in the data set from `anti_join(df1, df2, by = c("id" = "id"))`?

```{r, echo = FALSE}
## 2
```

2. Examine the following data sets (the first is `df3` and the second is `df4`) and then, without running any code, answer the following questions. This question is a step up in challenge from Exercise 9 because a few of the levels of the `id` key have duplicates.

```{r, echo = FALSE, results = "show"}
df3 <- tibble(id = c("A", "A", "C", "C", "F", "F"), xvar = c(1, 2, 3, 1, 2, 6))
df4 <- tibble(id = c("A", "B", "C", "D", "D", "D"), yvar = c(2, 1, 2, 1, 1, 4))
library(pander)
pander(df3)
pander(df4)
```

a. How many rows would be in the data set from `left_join(df1, df2, by = c("id" = "id"))`?

b. How many rows would be in the data set from `left_join(df2, df1, by = c("id" = "id"))`?

c. How many rows would be in the data set from `full_join(df1, df2, by = c("id" = "id"))`?

d. How many rows would be in the data set from `inner_join(df1, df2, by = c("id" = "id"))`?

e. How many rows would be in the data set from `semi_join(df1, df2, by = c("id" = "id"))`?

f. How many rows would be in the data set from `anti_join(df1, df2, by = c("id" = "id"))`?

## Chapter Exercises {#chapexercise-10}

Exercises marked with an \* indicate that the exercise has a solution at the end of the chapter at \@ref(solutions-10).

1. \* Read in the gun violence data set, and suppose that you want to add a row to this data set that has the statistics on gun ownership and mortality rate in the District of Columbia (Washington D.C., which is in the NE region, has 16.7 deaths per 100,000 people, and a gun ownership rate of 8.7%). To do so, create a `tibble()` that has a single row representing D.C. and then combine your new `tibble` with the overall gun violence data set. Name this new data set `all_df`.

```{r, message = FALSE}
library(tidyverse)
mortality_df <- read_csv(here("data/gun_violence_us.csv"))
```

```{r, echo = FALSE, results = "hide"}
dc_df <- tibble(state = "Washington D.C.", mortality_rate = 16.7,
       ownership_rate = 0.087, region = "NE")
all_df <- bind_rows(mortality_df, dc_df)
```

2. Explain why each attempt at combining the D.C. data with the overall data doesn't work or is incorrect.

```{r, error = TRUE, echo = TRUE, results = "hide"}
test1 <- tibble(state = "Washington D.C.", mortality_rate = 16.7,
                ownership_rate = 8.7, region = "NE")
bind_rows(mortality_df, test1)

test2 <- tibble(state = "Washington D.C.", mortality_rate = 16.7,
       ownership_rate = 0.087, region = NE)
bind_rows(mortality_df, test2)

test3 <- tibble(state = "Washington D.C.", mortality_rate = "16.7",
       ownership_rate = "0.087", region = "NE")
bind_rows(mortality_df, test3)
```

3. Examine the following data sets that are in `R`'s base library on demographic statistics about the U.S. states and state abbreviations:

```{r}
df1 <- as_tibble(state.x77)
df2 <- as_tibble(state.abb)
df1
df2
```

Combine the two data sets with `bind_cols()`. What are you assuming about the data sets in order to use this function? 

```{r, echo = FALSE}
states_df <- bind_cols(df1, df2)
## assuming that the order of these data sets in base R is the same
## 
## (they are, as they all come from the same data base: can look
## at them with ?state.x77)
```

4. \* Combine the columns of the states data set you made in Exercise 3 with the mortality data set __without__ Washington D.C.

```{r, echo = FALSE, message = FALSE, results = "hide"}
bind_cols(mortality_df, states_df)
```

5. \* Use a join function to combine the mortality data set (`all_df` from Exercise 1) __with__ D.C. with the states data set from Exercise 3 (`states_df`). For this exercise, keep the row with Washington D.C., having it take on `NA` values for any variable not observed in the states data.

```{r, echo = FALSE, message = FALSE, results = "hide"}
left_join(all_df, states_df, by = c("state" = "value"))
## or
full_join(all_df, states_df, by = c("state" = "value"))
```

6. \* Repeat Exercise 5, but now drop Washington D.C. in your merging process. Practice doing this __with a join function__ (as opposed to `slice()`-ing it out explicitly).

```{r, echo = FALSE, message = FALSE, results = "hide"}
inner_join(all_df, states_df, by = c("state" = "value"))
## or
left_join(states_df, all_df, by = c("value" = "state"))
```

7. \* Use `semi_join()` to create a subset of `states_df` that are in the `NE` region. __Hint__: You will need to filter `all_df` from Exercise 1 first to contain only states in the `NE` region.

```{r, echo = FALSE, message = FALSE, results = "hide"}
ne_df <- all_df |> filter(region == "NE")
semi_join(states_df, ne_df, by = c("value" = "state"))
```

8. \* Do the same thing as Exercise 7, but this time, use `anti_join()`. __Hint__: You'll need to filter `all_df` in a different way to achieve this.

```{r, echo = FALSE, message = FALSE, results = "hide"}
notne_df <- all_df |> filter(region != "NE")
anti_join(states_df, notne_df, by = c("value" = "state"))
```

<br>

## Exercise Solutions {#solutions-10}

### `bind_rows()` and `bind_cols()` S

1. \* Run the following and explain why `R` does not simply stack the rows. Then, fix the issue with the `rename()` function.

```{r}
df_test1a <- tibble(xvar = c(1, 2), yvar = c(5, 1))
df_test1b <- tibble(x = c(1, 2), y = c(5, 1))
bind_rows(df_test1a, df_test1b)
```

```{r}
## This doesn't stack rows because the columns are named differently
## in the two data sets. If xvar is the same variable as x and 
## yvar is the same variable as y, then we can rename the columns in
## one of the data sets:

df_test1a <- df_test1a |> rename(x = "xvar", y = "yvar")
bind_rows(df_test1a, df_test1b)
```

### Mutating Joins S

### Filtering Joins S

### Chapter Exercises S {#chapexercise-10-S}

1. \* Read in the gun violence data set, and suppose that you want to add a row to this data set that has the statistics on gun ownership and mortality rate in the District of Columbia (Washington D.C., which is in the NE region, has 16.7 deaths per 100,000 people, and a gun ownership rate of 8.7%). To do so, create a `tibble()` that has a single row representing D.C. and then combine your new `tibble` with the overall gun violence data set. Name this new data set `all_df`.

```{r}
library(tidyverse)
mortality_df <- read_csv(here("data/gun_violence_us.csv"))
```

```{r}
dc_df <- tibble(state = "Washington D.C.", mortality_rate = 16.7,
       ownership_rate = 0.087, region = "NE")
all_df <- bind_rows(mortality_df, dc_df)
```

4. \* Combine the columns of the states data set you made in Section A Exercise 3 with the mortality data set __without__ Washington D.C.

```{r, message = FALSE, results = "hide"}
bind_cols(mortality_df, states_df)
```

5. \* Use a join function to combine the mortality data set __with__ D.C. with the states data set from Exercise 3. For this exercise, keep the row with Washington D.C., having it take on `NA` values for any variable not observed in the states data.

```{r, message = FALSE}
left_join(all_df, states_df, by = c("state" = "value"))
## or
full_join(all_df, states_df, by = c("state" = "value"))
```

6. \* Repeat Exercise 5, but now drop Washington D.C. in your merging process. Practice doing this __with a join function__ (as opposed to `slice()` ing it out explictly).

```{r}
inner_join(all_df, states_df, by = c("state" = "value"))
## or
left_join(states_df, all_df, by = c("value" = "state"))
```

7. \* Use `semi_join()` to create a subset of `states_df` that are in the `NE` region. __Hint__: You will need to filter `all_df` first to contain only states in the `NE` region.

```{r}
ne_df <- all_df |> filter(region == "NE")
semi_join(states_df, ne_df, by = c("value" = "state"))
```

8. \* Do the same thing as Exercise 7, but this time, use `anti_join()`. __Hint__: You'll need to filter `all_df` in a different way to achieve this.

```{r}
notne_df <- all_df |> filter(region != "NE")
anti_join(states_df, notne_df, by = c("value" = "state"))
```

## Non-Exercise `R` Code {#rcode-10}

```{r ref.label=knitr::all_labels(appendix == TRUE), echo=TRUE, eval=FALSE}
```


