# Wrangling with `dplyr` {#sec-dplyr}

```{r}
#| echo: false
source("_common.R")
```

__Goals:__

* Use the `filter()` and `slice()` functions to keep certain rows of a data frame.
* Use the `select()` function to keep certain columns of a data frame.
* Use the `arrange()` function to sort a data frame.
* Explain what the pipe operator `|>` does and explain when you can and cannot use the pipe operator.
* Combine the above goals with plotting to explore the `babynames` data set.

## `filter()`,`slice()`, `select()`, `arrange()`, and Piping

Throughout this chapter, we will use the `babynames` data set in the `babynames` `R` package. To begin, install the `babynames` package by typing `install.packages("babynames")` in your bottom-left console window, and then load the `babynames` package in with

```{r, appendix = TRUE}
library(babynames)
```

Read about the data set by typing `?babynames` in your bottom-left window of `R Studio`. We see that this data set contains baby name data provided by the SSA in the United States dating back to 1880:

```{r, appendix = TRUE}
babynames
```

There are many interesting and informative plots that we could make with this data set, but most require some data wrangling first. This chapter will provide the foundation for such wrangling skills.

Before we begin, we also need to load in the `tidyverse` package so that we can use the `dplyr` functions.

```{r}
library(tidyverse)
```

### `filter()` and `slice()`: Choosing Rows

There are a lot of commonly used `dplyr` wrangling functions, but we need to start somewhere! We will begin with two functions used to choose rows to keep in the data frame: `filter()`, which keeps rows based on a condition that is provided, and `slice()`, which keeps rows based on row numbers that are provided.

::: {.callout-important}
## Important

`filter()` is a way to keep rows by specifying a __condition__ related to one or more of the variables in the data set. 
:::

We can keep rows based on a categorical variable or a quantitative variable or a combination of any number of categorical and quantitative variables. `R` uses the following symbols to make comparisons:

* `<` and `<=` for less than and less than or equal to, respectively
* `>` and `>=` for greater than and greater than or equal to, respectively
* `==` for equal to (careful: equal to is a double equal sign `==`)
* `!=` for not equal to (in general, `!` denotes "not")

The easiest way to see how filter works is with some examples. The following line of code `filter()`s the `babynames` data set based on a condition. See if you can guess what the following statement does before running the code.

```{r, results = "hide", appendix = TRUE}
babynames |> filter(name == "Matthew")
```

We're seeing our first of many, many, many, many, many, many, many instances of using `|>` to "pipe." Piping is a really convenient, easy-to-read way to build a sequence of commands. How you can read the above code is:

1. Take the `babynames` data frame object and with `babynames`, __and then__

1. perform a `filter()` step to keep only the rows where `name` is `Matthew`.

::: {.callout-note}
## Note

The __"and then"__ phrase is the most commonly used phrase to explain how to read the pipe `|>` in a line of code. 
:::

Examine the following four `filter()` statements and see if you can guess what each one is doing before running the code.

```{r}
#| results: false
babynames |> filter(year >= 2000)
babynames |> filter(sex != "M")
babynames |> filter(prop > 0.05)
babynames |> filter(year == max(year))
```

Note that some things put in quotes, like `"M"` while some things aren't, like `2000`. Generally, if we are filtering by a numeric variable, like `prop`, any value used in the filtering statement does not go in quotes, while if we are filtering by a categorical variable, like `sex` or `name`, the value used in the filtering statement does go in quotes.

We can also combine conditions on multiple variables in `filter()` using Boolean operators.  Look at the Venn diagrams in `R` for Data Science to learn about the various Boolean operators you can use in `R`: <a href="https://r4ds.had.co.nz/transform.html#logical-operators" target="_blank">https://r4ds.had.co.nz/transform.html#logical-operators</a>. The Boolean operators can be used in other functions in `R` as well, as we will see in the next section with `mutate()`.

The following gives some examples. See if you can figure out what each line of code is doing before running it.

```{r, results = "hide", appendix = TRUE}
babynames |> filter(n > 20000 | prop > 0.05)
babynames |> filter(sex == "F" & name == "Mary")
babynames |> filter(sex == "F" & name == "Mary" & prop > 0.05)
```

::: {.callout-important}
## Important

While `filter()` lets us choose which rows in a data set to keep based on a __condition__, `slice()` allows us to specify the __row numbers__ corresponding to rows that we want to keep. 
:::

For example, suppose that we only want to keep the first 5 rows of the `babynames` data:

```{r, appendix = TRUE}
babynames |> slice(c(1, 2, 3, 4, 5))
```

The `c()` function is used here to bind the numbers `1, 2, 3, 4, 5` into a __vector__. `c()` actually stands for "concatenate." We can alternatively use `slice(1:5)`, which is shorthand for `slice(c(1, 2, 3, 4, 5))`. The `:` is useful for larger numbers of rows that we might want to keep. For example, `slice(1:1000)` is much easier than `slice(c(1, 2, 3, 4, ...., 999, 1000))`.  While `slice()` is useful, it is relatively simple. We'll come back to it again in a few weeks as well when we discuss subsetting in base `R`.

__Exercise 1__. Use `filter()` on the `babynames` data set to only keep rows with your name. (Note that, the data set has a large variety of names, but, if there were fewer than 5 people born in the United States with your name every year, then your name might not appear in the data set. In that case, just use a different name that interests you!).

__Exercise 2__. Use `filter()` to only keep rows in the `babynames` data set from the `year` `2000` onward.

__Exercise 3__. Use `filter()` to only keep rows in `babynames` with your name from Exercise 1 __and__ that have a `year` from `2000` onward.

::: {.callout-tip collapse="true"}
## Hint (only if you get stuck)

You will need to use the `&` Boolean operator to combine your conditions from the previous two exercises.
:::

__Exercise 4__. Use `slice()` to keep the first `20` rows of `babynames`.

### `arrange()`: Ordering Rows

The `arrange()` function allows us to order rows in the data set using one or more variables. The function is very straightforward: we only need to provide the name of the variable that we want to order by. For example,

```{r}
babynames |> arrange(n)
```

orders the `babynames` data so that `n`, the number of babies, goes from smallest to largest. If we want to `arrange()` by descending order of a variable, we just wrap the name of the variable we are ordering by with `desc()` for "descending:"

```{r}
babynames |> arrange(desc(n))
```

__Exercise 5__. Use `arrange()` to sort the data frame so that it is in descending order by the `prop` variable. This allows us to examine the names with the highest proportion of babies given that name for that given `year`.

__Exercise 6__. Use `arrange()` on the categorical variable `name`. What does `arrange()` seem to do on a categorical variable?

### `select()`: Choosing Columns 

We might also be interested in getting rid of some of the columns in a data set. One reason to do this is if there are an overwhelming (30+) columns in a data set, but we know that we just need a few of them. The easiest way to use `select()` is to just input the names of the columns that you want to keep. For example, if we were only interested in the `name` and `n` variables, we could make a data frame with only those variables with:

```{r, appendix = TRUE}
babynames |> select(name, n)
```

We might also want to use `select()` to get rid of one or more columns. If this is the case, we denote any column you want to get rid of with `-`. For example, we might want to get rid of the `sex` column and the `prop` column with

```{r, appendix = TRUE}
babynames |> select(-sex, -prop)
```

`select()` comes with many useful helper functions, but these are oftentimes not needed. One of the helper functions that __is__ actually often useful is `everything()`, which selects all columns in a data frame. This can be used to help re-order columns if you have a particular column that you want to appear first:

```{r, appendix = TRUE}
babynames |> select(name, everything())
```

The previous line of code puts `name` as the first variable in the data frame.

::: {.callout-note}
## Note

For data frames with only a few columns, re-ordering the columns is generally not that useful, but, for data frames with hundreds or thousands of columns, moving variables of interest to the beginning of the data frame helps us view these variables more readily.
:::

__Exercise 7__. Use `select()` to keep only the `year`, `name` and `prop` variables in two ways: (1) keep `year`, `name`, and `prop` directly by specifying these variable names in `select()` and (2) keep only `year`, `name`, and `prop` indirectly by specifying that `sex`, and `n` should be dropped from the data frame.

### Assigning a Data Frame a Name

Up until now, we have not assigned any of the new data frames we are creating a name. For example, with 

```{r}
babynames |> filter(name == "Matthew")
```

we get a printout of the data with only the `name` `Matthew`, but, the data frame object is not assigned a name at all. So, we cannot use `ggplot()` to make a plot of `n` only for the name `Matthew` because we do not have a named data set that only has the name `Matthew`. In other words, `R` performs the `filter()`, but the filtered data frame doesn't get saved to any particular named object. If we want to "save" the new data set for future use (like in a plot command), then we can use the assignment operator, `<-`:

```{r}
babynames_matthew <- babynames |> filter(name == "Matthew")
```

In the previous chunk, we assign the data frame with only `Matthew` names to the name `babynames_matthew`:

```{r}
babynames_matthew
```

::: {.callout-note}
## Note

We can really use almost any name we would like but it's more helpful to use a name that makes sense (`babynames_matthew`) than a name that is meaningless.
:::

An example of giving a data frame a meaningless name would be:

```{r}
take_it_kronk_feel_the_power <- babynames |> filter(name == "Matthew")
```

We can use the data frame `take_it_kronk_feel_the_power` in the same way as `babynames_matthew`, but `take_it_kronk_feel_the_power` is not as easy to remember and doesn't make any sense in this context. 

__Exercise 8__. Name your data frame that you created from __Exercise 1__. Then, type in the name you assigned to the data frame to verify that you can see some printed out data.

### More about the Pipe

We are jumping straight into using piping, but we do want to have an appreciation on how terrible life would be without it. What piping does is make whatever is given before the `|>` pipe the first argument of whatever function follows the `|>`. So, for a toy data frame named `df` with variable `xvar`,

```{r, eval = FALSE}
df |> filter(xvar <= 3)
```

is equivalent to

```{r, eval = FALSE}
filter(df, xvar <= 3)
```

It might also help to use an analogy when thinking about piping. Consider the Ke$ha's morning routine in the opening of the song Tik Tok. If we were to write her morning routine in terms of piping,

```{r, eval = FALSE}
kesha |> wake_up(time = "morning", feels_like = "P-Diddy") |>
  grab(glasses) |>
  brush(teeth, item = "jack", unit = "bottle") |> ....
```

Kesha first wakes up in the morning, _and then_ the Kesha that has woken up grabs her glasses, _and then_ the Kesha who has woken up and has grabbed her glasses proceeds to brush her teeth, etc.

The pipe operator `|>` is loaded automatically with `R`. We will heavily use the pipe throughout the entire semester so it's worth it to delve a little deeper into what it is here. We will use the fitness data to further explore the pipe. Read in the data with

```{r}
fitness_df <- read_csv("data/higham_fitness_clean.csv",
                       col_types = list(stepgoal = col_factor()))
fitness_df
```

Thus far, we have used a single pipe `|>` to do one task, but, we can string together multiple `dplyr` functions with multiple `|>` statements. For example, suppose that we wanted to keep only the `weekday`s that were `Sat` and `Sun`, __and then__, order the data set so that it was in descending order of `steps` taken:

```{r}
fitness_df |> filter(weekday == "Sat" | weekday == "Sun") |>
  arrange(desc(steps))
```

This reads: "take `fitness_df` and then `filter()` it to keep only Saturdays and Sundays and then sort it in descending order of `steps`."

::: {.callout-important}
## Important

Consecutive pipes build on each other: we can slowly build out what the pipe is doing step-by-step. Running code "pipe by pipe" can be a very helpful way to understand what each consecutive piping statement is doing.
:::

The code

```{r}
fitness_df |> filter(weekday == "Sat" | weekday == "Sun")
```

is equivalent to:

```{r}
filter(fitness_df, weekday == "Sat" | weekday == "Sun")
```

Then,

```{r}
filter(fitness_df, weekday == "Sat" | weekday == "Sun") |>
  arrange(desc(steps))
```

is equivalent to:

```{r}
arrange(filter(fitness_df, weekday == "Sat" | weekday == "Sun"),
        desc(steps))
```

So, why use the pipe? Compare the code the uses the pipe operator to the code that doesn't. Which is easier to read? Which do you think is easier to write? The example shows that, for our purposes, the pipe is most useful in aiding the readability of our code. It's a lot easier to see what's happening in the code chunk with the pipes than it is in the previous code chunk without the pipe because, with the pipe, we can read the code from left to right and top to bottom. Without the pipe, we need to read the code from the "inside to the outside", which is much more challenging. 

There are many situations in which using the `|>` would not be appropriate. To use the pipe, what precedes the `|>` must be the first argument in the function following the `|>`. For `tidyverse` functions that we use throughout the course, this condition is almost always true because these functions were designed with piping in mind. But, for non-`tidyverse` functions, this may not be the case. 

For example, if you have taken STAT 213, you've used `lm()` to fit many different types of linear models. If you haven't taken STAT 213, `lm(response ~ explanatory, data = name_of_data_set)` stands for "linear model" and can be used to fit the simple linear regression model that you learned about in STAT 113. You might expect something like this to fit a linear model using `fitness_df` with `active_cals` as the response and `steps` as the predictor:

```{r, error = TRUE}
fitness_df |> lm(active_cals ~ steps)
```

But it throws us an error. Typing in `?lm` reveals that its first argument is a `formula` to fit the model, not a data set. So the function is trying to run

```{r, error = TRUE}
lm(videogame_df, metascore ~ price)
```

which doesn't work because the arguments to the function are mixed up (the formula should appear first and the data set should appear second).

::: {.callout-note}
## Note

The pipe operator `|>` is relatively new. Previously, the primary pipe operator used was `%>%` and came from the `magrittr` package. For almost all cases, the two operators are equivalent. However, when scanning the Internet for help with code, you will probably see `%>%` used in many of people's responses on sites like StackOverflow.
:::

__Exercise 9__. This "More About the Pipe" section will make more sense as we proceed through the course. For now, we just want to be able to understand that something like `df |> slice(1:6)` is equivalent to `slice(df, 1:6)`. Practice by converting the following code to use the pipe:

```{r}
filter(fitness_df, active_cals > 50)
```

## Practice

In general, practice exercises will be split between exercises that will be done together as a class and exercises that you will do in groups or on your own. The purpose of the class exercises is to give some guidance on how we might think logically through some of the code and the results. The purpose of the group exercises and the on your own exercises is so that you have a chance to practice what you've learned with your table or on your own.

### Class Exercises

For many of these class exercises, we will start practicing stringing together multiple piping statements. We will also practice more with `ggplot()` by making plots of some of the data sets we are creating.

__Class Exercise 1__. In the `babynames` data set, use `filter()`,  `arrange()`, and `slice()` to print the 10 most popular Male babynames in 2017.

__Class Exercise 2__. Name the data frame you created in the previous exercise and use the data frame to make a bar plot of the 10 most popular Male babynames in 2017, along with the number of babies with each name in that year.

__Class Exercise 3__. In the `babynames` data set, keep only the rows with your name (or, another name that interests you) and one sex (either `"M"` or `"F"`).

__Class Exercise 4__. Name the new data set you made in the previous exercise and then construct a line plot that looks at either the `n` or `prop` of your chosen name through `year`.

__Class Exercise 5__. Explain why the following code gives a warning message and returns `NA`. Use the order of Arguments in `?mean` in your explanation.

```{r, echo = TRUE}
fitness_df |> mean(distance)
```

### Your Turn

__Your Turn 1__. Get a little more practice with using conditions in `filter()` by completing the following:

a. Create a data set with all years __except__ the year 1945.

b. Create a data set that only has rows where `n` is between 400 and 5000.

c. Create a data set with rows that are either `F` (female) `Monica` names or `F` (female) `Hilary` names.

::: {.callout-tip collapse="true"}
## Hint

The syntax `filter(x_var > 20 & < 30)` is not correct. The variable that we are filtering with needs to go in __each__ conditional statement: `filter(x_var > 20 & x_var < 30)`
:::

__Your Turn 2__. Name your data set is part (c) of the previous exercise. Then, use the data set to make a line plot comparing the popularity of the `Monica` and `Hilary` names through time.

__Your Turn 3__. Choose 5 names paired with 5 sexes that interest you and create a new data set that only has data on those 5 name/sex combinations. Then, make a line plot showing the popularity of these 5 names over time. 

__Your Turn 4__. Choose a year and a sex that interests you and create a data set that only contain observations from that year and sex. Then, make a bar plot that shows the top 10 names from that year and sex, showing the `prop` of babies born with each of those 10 names in that year.

## `mutate()`, `group_by()`, `summarise()`, and Missing Values

__Goals:__

*  Use the `mutate()`, `if_else()`, and `case_when()` functions to create new variables.
* Use `group_by()` and `summarise()` to create useful summaries of a data set. * Explain what `dplyr` functions do with missing values.
* Combine the above goals with plotting to explore a data set on SLU majors.

Throughout this section, we will use a data set that contains observations for each of SLU's majors, with three variables per major:

* `Major`, the name of the major.
* `nfemales`, the number of female graduates in that major from 2015 - 2019.
* `nmales`, the number of male graduates in that major from 2015 - 2019.

Begin by reading in the data set with

```{r, message = FALSE, warning = FALSE, appendix = TRUE}
library(tidyverse)
slumajors_df <- read_csv("data/SLU_Majors_15_19.csv")
slumajors_df
```

### `mutate()`: Create Variables

Sometimes, we will want to create a new variable that's not in the data set, oftentimes using `if_else()`, `case_when()`, or basic algebraic operations on one or more of the columns already present in the data set.

`R` understands the following symbols:

* `+` for addition, `-` for subtraction
* `*` for multiplication, `/` for division
* `^` for raising something to a power (`3 ^ 2` is equal to `9`)

`R` also does the same order of operations as usual: parentheses, then exponents, then multiplication and division, then addition and subtraction.

For example, suppose that we want to create a variable in `slumajors_df` that has the total number of students graduating in each major. We can do this with `mutate()`:

```{r, appendix = TRUE}
slumajors_df |> mutate(ntotal = nfemales + nmales)
```

The `|>` operator reads as "and then", as in "take `slumajors_df` _and then_ `mutate()` it."

Piping is a really convenient, easy-to-read way to build a sequence of commands. How you can read the above code is:

1. Take `slumajors_df` and with `slumajors_df`,

1. perform a `mutate()` step to create the new variable called `ntotal`, which is `nfemales` plus `nmales`. 

Since this is our first time using `mutate()`, let's also delve into what the function is doing. In general, `mutate()` reads:

`mutate(name_of_new_variable = operations_on_old_variables)`.

`R` just automatically assumes that you want to do the operation for every single row in the data set, which is often quite convenient!

We might also want to create a variable that is the percentage of students identifying as female for each major:

```{r, appendix = TRUE}
slumajors_df |>
  mutate(percfemale = 100 * nfemales / (nfemales + nmales))
```

::: {.callout-important}
## Important

What happened to `ntotal`? Is it still in the printout? It's not: when we created the variable `ntotal`, we didn't actually __save__ (or assign a name to) the new data set as anything. So `R` makes and prints the new variable, but it doesn't get saved to any data set.
:::

If we want to save the new data set for later use, then we can use the `<-` operator. Here, we're naming the new data set with the same name as the old data set: `slumajors_df`. Then, we're doing the same thing for the `percfemale` variable. We won't always want to give the new data set the same name as the old one: we'll talk about this in more detail in the class exercises.

```{r, appendix = TRUE}
slumajors_df <- slumajors_df |>
  mutate(percfemale = 100 * nfemales / (nfemales + nmales))
```

```{r, appendix = TRUE}
slumajors_df <- slumajors_df |> mutate(ntotal = nfemales + nmales)
```

But, you can pipe as many things together as you want to, so it's probably easier to just create both variables in one go. The following chunk says to "Take `slumajors_df` and create a new variable `ntotal`. With that new data set, create a new variable called `percfemale`." Finally, the `slumajors_df <- ` at the beginning says to "save this new data set as a data set with the same name, `slumajors_df`, thus overwriting the original `slumajors_df`."

```{r, appendix = TRUE}
slumajors_df <- slumajors_df |>
  mutate(ntotal = nfemales + nmales) |>
  mutate(percfemale = 100 * nfemales / (nfemales + nmales))
```

Now suppose that you want to make a new variable that is conditional on another variable (or more than one variable) in the data set. Then we would typically use `mutate()` coupled with

* `if_else()` if your new variable is created on only one condition
* `case_when()` if your new variable is created on more than one condition

::: {.callout-important}
## Important

The conditions that we supply use the same syntax as the conditions we used with `filter()`. For example, we still use the same Boolean operators (`&` for "and" and `|` for "or", etc.).
:::

Suppose we want to create a new variable that tells us whether or not the `Major` has a majority of Women. That is, we want this new variable, `morewomen` to be `"Yes"` if the `Major` has more than 50% women and `"No"` if it has 50% or less. 

```{r, appendix = TRUE}
slumajors_df |> mutate(morewomen = if_else(percfemale > 50,
                                            true = "Yes",
                                            false = "No"))
```

The `mutate()` statement reads: create a new variable called `morewomen` that is equal to `"Yes"` if `percfemale` > `50` is true and is equal to `"No"` if `perfemale` is not > `0.5`. The first argument is the condition, the second is what to name the new variable when the condition holds, and the third is what to name the variable if the condition does not hold.

We use __conditions__ all of the time in every day life. For example, New York had a quarantine order stating that people coming from 22 states in July 2020 would need to quarantine. In terms of a condition, this would read "if you are traveling to New York from one of the 22 states, then you need to quarantine for 2 weeks. Else, if not, then you don't need to quarantine." The trick in using these conditions in `R` is getting used to the syntax of the code.

We can see from the above set up that if we had more than one condition, then we'd need to use a different function (or use nested `if_else()` statements, which can be a nightmare to read). If we have more than one condition for creating the new variable, we will use `case_when()`. 

For example, when looking at the output, we see that `Biochemistry` has 56% female graduates. That's "about" a 50/50 split, so suppose we want a variable called `large_majority` that is `"female"` when the percent women is 70 or more, `"male"` when the percent women is 30 or less, and `"none"` when the percent female is between 30 and 70. 

```{r, appendix = TRUE}
slumajors_df |> mutate(large_majority =
                          case_when(percfemale >= 70 ~ "female",
                                    percfemale <= 30 ~ "male",
                                    percfemale > 30 & percfemale < 70 ~ "none")) 
```

The `case_when()` function reads "When the percent female is more than or equal to 70, assign the new variable `large_majority` the value of `"female"`, when it's less or equal to 30, assign the new variable `large_majority` the value of `"male"`, and when it's more than 30 and less than 70, assign the `large_majority` variable the value of `"none"`.

Let's save these two new variables to the `slumajors_df`:

```{r, appendix = TRUE}
slumajors_df <- slumajors_df |>
  mutate(morewomen = if_else(percfemale > 50,
                             true = "Yes",
                             false = "No")) |>
  mutate(large_majority =
           case_when(percfemale >= 70 ~ "female",
                     percfemale <= 30 ~ "male",
                     percfemale > 30 & percfemale < 70 ~ "none")) 
```

::: {.callout-note}
## Note

Numeric values typically do not go in quotation marks (like `70` and `30`) while strings like `"female"` and `"none"` do need quotes.
:::

__Exercise 1__. Use `mutate()` with `if_else()` to create a new variable that is called `major_size` and is equal to `"large"` when the total number of majors is 100 or more and `"small"` when the total number of majors is less than 100.

__Exercise 2__. Use `mutate()` with `case_when()` to create a new variable that is called `major_size2` and is `"large"` when the total number of majors is 150 or more, `"medium"` when the total number of majors is between 41 and 149, and `"small"` when the total number of majors is 40 or fewer.

__Exercise 3__. Create a new variable that is the `nfemales` to `nmales` ratio (so your new variable should be `nfemales` divided by `nmales`).

### `summarise()`: Create Summaries

The `summarise()` function is useful to get various summaries from the data. For example, suppose that we want to know the average major size at SLU across the five year span or the total number of majors across those five years. Then we can use `summarise()` and a summary function, like `mean()`, `sum()`, `median()`, `max()`, `min()`, `n()`, etc. You'll notice that the format of `summarise()` is extremely similar to the format of `mutate()`. Using the `slumajors_df` data again just for one quick example,

```{r, appendix = TRUE}
slumajors_df |>
  summarise(meantotalmajor = mean(ntotal),
            totalgrad = sum(ntotal))
```

In the code chunk above, we obtain two summaries (`meantotalmajor` and `totalgrad`), separated by a comma. In general, this syntax also works with `mutate()` to create more than one variable in the same `mutate()` function.

::: {.callout-note}
## Note

Most summary functions are intuitive if you've had intro stat. But, if you're not sure whether the summary for getting the maximum is `maximum()` or `max()`, just try both or do a quick google search.
:::

Another useful summary function is `n()`, the counting function, which counts up the total number of rows. 

```{r, appendix = TRUE}
slumajors_df |> summarise(totalobs = n())
```

::: {.callout-note}
## Note

The counting function `n()` typically doesn't have any arguments. It's typically more useful when paired with `group_by()`, which is discussed next.
:::

__Exercise 4__. Find the total number of `nfemales` in the data set and the total number of `nmales` in the data set.

::: {.callout-tip collapse="true"}
## Hint (only if you get stuck)

The summary function you will need to use within `summarise()` is `sum()`, which will add up the numbers in the `nfemales` column. You'll then need to add a `,` and then `sum()` the number of `nmales`. 
:::

### `group_by()`: Groups

`summarise()` is often most useful when paired with a `group_by()` statement. Doing so allows us to get summaries across different groups. Conceptually, we can think of `toy_df |> group_by(categorical_var)` as "grouping" `toy_df` into a bunch of different groups, with one group for each level of `categorical_var`. Then, operations from any other functions after the  `group_by()` function are carried out __for each group__.

For example, suppose that you wanted the total number of registered births per year in the `babynames` data set that we used earlier. We can then use `group_by()` to "split" the `babynames` data  frame into 138 separate data frames (one for each `year` in the data set). After we `group_by(year)`, then the `summarise()` statement below adds up the `n` variable for each `year`:

```{r, appendix = TRUE}
babynames |> group_by(year) |>
  summarise(totalbirths = sum(n))
```

As another example, we can also use the `n()` function to count up the number of rows for each `year`:

```{r, appendix = TRUE}
babynames |> group_by(year) |>
  summarise(n_name = n())
```

::: {.callout-note}
## Note

`group_by()` can be used in combination with the other `dplyr` functions we have learned about (`mutate()`, `filter()`, etc.). We will explore this functionality in class.
:::


__Exercise 5__. With the `babynames` data set, use `group_by()` and `summarise()` to create a data set that has the total number of births for each `name`.

__Exercise 6__. With the `babynames` data set, use `group_by()` and `summarise()` to create a data set that has how many times each `name` appears in `babynames`.

::: {.callout-tip collapse="true"}
## Hint (only if you get stuck)

For one of the previous exercises, you will need to use the `sum()` function on `n`, the column with the total number of births while for the other exercise, you will need to use the `n()` function.
:::

### Missing Values

Both of the data sets that we've worked with are nice in that they do not have any missing values. We'll see plenty of examples of data sets with missing values later, so we should examine how the various functions that we've talked about so far tackle missing values.

Missing values in `R` are denoted with `NA` for "Not Available." Run the following code to create a toy data set with some missing values so that we can see how the various functions we've used so far deal with `NA` values.

```{r, appendix = TRUE}
toy_df <- tibble(x = c(NA, 3, 4, 7),
                 y = c(1, 4, 3, 2),
                 z = c("A", "A", "B", NA))
toy_df
```

We will first discuss how to remove missing values when computing summaries for a variable that contains some `NA` values. 

::: {.callout-important}
## Important

Missing values should not be removed without carefully examination and a note of what the consequences might be (i.e. why are these values missing?).
:::

We have a toy data set that is meaningless, so we aren't asking those questions now, but we will for any future data set that does have missing values!

__If__ we have investigated the missing values and are comfortable with removing them, many functions that we would use in `summarise()` have an `na.rm` argument that we can set to `TRUE` to tell `summarise()` to remove any `NA`s before taking the `mean()`, `median()`, `max()`, etc.

```{r, appendix = TRUE}
toy_df |> summarise(meanx = mean(x, na.rm = TRUE))
```

If we want to remove the missing values more directly, we can use the `is.na()` function in combination with `filter()`. If the variable is `NA` (Not Available) for an observation, `is.na()` evaluates to `TRUE`; if not, `is.na()` evaluates to `FALSE`. Test this out using `mutate()` to create a new variable for whether `x` is missing:

```{r, appendix = TRUE}
toy_df |> mutate(missingx = is.na(x))
```

`missingx` is `TRUE` only for the the first observation.  We can use this to our advantage with `filter()` to filter it out of the data set, without going through the extra step of actually making a new variable `missingx`:

```{r, appendix = TRUE}
toy_df |> filter(is.na(x) != TRUE)
```

You'll commonly see this written as short-hand in people's code you may come across as:

```{r, appendix = TRUE}
toy_df |> filter(!is.na(x))
```

which says to "keep anything that does not have a missing `x` value" (recall that the `!` means "not" so that we are filtering to keep any value of `x` that is "not" missing). 

__Exercise 7__. `filter()` `toy_df` to keep only the rows where `z` is not missing.

## Practice

In general, practice exercises will be split between exercises that will be done together as a class and exercises that you will do in groups or on your own. The purpose of the class exercises is to give some guidance on how we might think logically through some of the code and the results. The purpose of the group exercises and the on your own exercises is so that you have a chance to practice what you've learned with your table or on your own.

### Class Exercises

__Class Exercise 1__. About 55% of SLU students identify as female. So, in the definition of the `morewomen` variable, does it make more sense to use 55% as the cutoff or 50%?

__Class Exercise 2__. Do you think it is ethical to exclude non-binary genders from analyses and graphs in the `slumajors` data set? What about in the `stat113_df` data that we looked at earlier? Why or why not? Try to construct arguments for both sides: you might also consider data privacy in your arguments.

__Class Exercise 3__. Investigate what happens with `case_when()` when you give overlapping conditions and when you give conditions that don't cover all observations. For overlapping conditions, create a variable `testcase` that is `"Yes"` when `percfemale` is greater than or equal to 40 and `"No"` when `percfemale` is greater than 60 For conditions that don't cover all observations, create a variable `testcase2` that is `"Yes"` when `percfemale` is greater than or equal to 55 and `"No"` when `percfemale` is less than 35. Put the new variables at the beginning of the data frame so that you can see what they contain more easily.

__Class Exercise 4__. The `rank()` function can be used within `mutate()` to "rank" a variable from lowest values to highest values (so that the case with the lowest value receives a `1`, the second lowest value receives a `2`, etc.). Use `group_by()` and `mutate()` to rank the names from most to least popular in each year-sex combination. We will make some notes about what `group_by()` does with more than 1 variable.

__Class Exercise 5__. From the data set in the previous exercise, `filter()` the data to keep only the most popular name in each year-sex combination and then construct a summary table showing how many times each name appears as the most popular name. With this exercise, we will make some notes about the `ungroup()` function, and, if we have time investigate a way to achieve the objective of this question without explicitly making a `rank` variable.

__Class Exercise 6__. Run the following code. Intuitively, a `slice(1, 2, 3, 4, 5)` should grab the first five rows of the data set, but, when we try to run that, we get 1380 rows. What is the issue?

```{r}
babynames_test <- babynames |>
  group_by(year, sex) |> mutate(ntest = n / prop)
babynames_test |> slice(1, 2, 3, 4, 5)
```

### Your Turn

__Your Turn 1__. Investigate how `group_by()` behaves with the five other main `dplyr` functions we have used. You can use `toy_df` to perform your investigation.

a. `mutate()`

b. `slice()`

c. `filter()`

d. `arrange()`

e. `select()`

__Your Turn 2__. Use `toy_df` again to investigate how the `dplyr` functions treat missing values by default.

a. `mutate()`. Try to create a new variable with `mutate()` involving `x`. What does `R` do with the missing value?

b. `arrange()`. Try arranging the data set by `x`. What does `R` do with the missing value?

c. `filter()`. Try filtering so that only observations where x is less than 5 are kept. What does `R` do with the missing value?

d. `summarise()`. Try using `summarise()` with a function involving x. What does `R` return?

e. `group_by()` and `summarise()`. To your statement in 4, add a `group_by(z)` statement before your `summarise()`. What does `R` return now?

__Your Turn 3__. In some cases throughout this chapter, we've renamed data sets using `<-` with the same name like

```{r}
toy_df <- toy_df |> mutate(newvar = x / y)
```

In other cases, we've given the data set a new name, like

```{r}
toy_small <- toy_df |> filter(!is.na(x))
```

For which of the functions below is a generally "safe" to name the data set using the same name after using the function. Give a one sentence reason for each part.

a. `mutate()`

b. `arrange()`

c. `filter()`

d. `summarise()`

e. `select()`

__Your Turn 4__. Compare `summarise()` with `mutate()` using the following code. What's the difference between the two functions?

```{r, results = "hide"}
slumajors_df |>
  summarise(meantotalmajor = mean(ntotal),
            totalgrad = sum(ntotal)) 
slumajors_df |>
  mutate(meantotalmajor = mean(ntotal),
            totalgrad = sum(ntotal)) |>
  select(meantotalmajor, totalgrad, everything())
```

__Your Turn 5__. With the `babynames` data, create a data set that has the number of unique names for each year. Then, make a line plot of the data.

__Your Turn 6__. With the `babynames` data, create a data set that has the number of unique names for each year-sex combination. Then, make a line plot of the data.

__Your Turn 7__. Create a data set that has a column for `name` so that each row shows the total number of births for each unique name across all years and both sexes.

